#!/bin/sh
set -x

## This file is part of onionservice, an easy to use Tor hidden services manager.
##
## Copyright (C) 2021 onionservice developers (GPLv3)
## Github:  https://github.com/nyxnor/onionservice
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it is useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.
##
## DESCRIPTION
## This file lets you manage your authorized clients for hidden services
## It is a TUI for the onionservice-cli with everything integrated in this menu
##
## SYNTAX
## sh onionservice-tui
##
###########################
######## FUNCTIONS ########

## include lib
ONIONSERVICE_PWD=
. "${ONIONSERVICE_PWD}"/onion.lib

i=0

service_menu(){
  DIALOG_TYPE="${1}"
  for SERVICE in $(sudo -u "${DATA_DIR_OWNER}" ls "${DATA_DIR_HS}"/); do
    i=$((i+1))
    ONION_HOSTNAME_WITHOUT_ONION=$(sudo -u "${DATA_DIR_OWNER}" cat "${DATA_DIR_HS}"/"${SERVICE}"/hostname 2>/dev/null | cut -d '.' -f1)
    if [ "${DIALOG_TYPE}" = "checklist" ]; then
      SERVICE_LIST=$(printf "%s\n%s\n%s\n%s\n" "${SERVICE_LIST}" "${SERVICE}" "${ONION_HOSTNAME_WITHOUT_ONION}" 0)
    elif [ "${DIALOG_TYPE}" = "menu" ]; then
      SERVICE_LIST=$(printf "%s\n%s\n%s\n" "${SERVICE_LIST}" "${SERVICE}" "${ONION_HOSTNAME_WITHOUT_ONION}")
    fi
  done

  TITLE="Onion Services"
  CHOICE_SERVICE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" --"${DIALOG_TYPE}" "${MENU}" \
  "$((i+7))" 80 2 ${SERVICE_LIST} 2>&1 >/dev/tty)

  [ ! -z "${CHOICE_SERVICE}" ] && SERVICE_NAME_LIST=$(printf %s"${CHOICE_SERVICE}" | sed "s/ /,/g")
}


auth_server_menu(){
  i=0
  for SERVICE in $(sudo -u "${DATA_DIR_OWNER}" ls "${DATA_DIR_HS}"/); do
    ## only include services that have at least one client
    CLIENT_CURRENT=$(sudo -u "${DATA_DIR_OWNER}" ls "${DATA_DIR_HS}"/"${SERVICE}"/authorized_clients/ | cut -d '.' -f1)
    if [ "${CLIENT_CURRENT}" != "" ]; then
      i=$((i+1))
      ONION_HOSTNAME_WITHOUT_ONION=$(sudo -u "${DATA_DIR_OWNER}" cat "${DATA_DIR_HS}"/"${SERVICE}"/hostname 2>/dev/null | cut -d '.' -f1)
      if [ -z "${CLIENT_LIST}" ]; then
        SERVICE_LIST=$(printf "%s\n%s\n%s\n" "${SERVICE}" "${ONION_HOSTNAME_WITHOUT_ONION}" 0)
        CLIENT_LIST=$(printf "%s\n" "${CLIENT_CURRENT}")
      else
        SERVICE_LIST=$(printf "%s\n%s\n%s\n%s\n" "${SERVICE_LIST}" "${SERVICE}" "${ONION_HOSTNAME_WITHOUT_ONION}" 0)
        CLIENT_LIST=$(printf "%s\n%s\n" "${CLIENT_LIST}" "${CLIENT_CURRENT}")
      fi
    fi
  done

  if [ -z "${SERVICE_LIST}" ]; then
    TITLE="Onion Service - INFO"
    MENU="\nNone of your services have client authorization."
    dialog --backtitle "${BACKTITLE}" --title "${TITLE}" --msgbox "${MENU}" 10 50
  else
    TITLE="Client Authorization - Server - Deletion"
    MENU="Use spacebar to select:"
    CHOICE_SERVICE=$(dialog --backtitle "${BACKTITLE}" --title "${TITLE}" --checklist "${MENU}" \
    "$((i+7))" 80 2 ${SERVICE_LIST} 2>&1 >/dev/tty)
  fi

  if [ ! -z "${CHOICE_SERVICE}" ]; then
    ## intersection of clients on the chosen services
    SERVICE_TOTAL=$(IFS=' '; set -f -- ${CHOICE_SERVICE}; printf %s"${#}")
    #CLIENT_INTERSECTION=$(printf %s"${CLIENT_LIST}" | tr " " "\n" | sort | uniq -c | tr -s " " | grep " ${SERVICE_TOTAL} " | sed "s/ ${SERVICE_TOTAL} //g" | tr "\n" " ")
    CLIENT_LIST=""
    i=0
    for CLIENT in $(printf %s"${CLIENT_LIST}" | tr " " "\n" | sort | uniq -c | tr -s " " | grep " ${SERVICE_TOTAL} " | sed "s/ ${SERVICE_TOTAL} //g" | tr "\n" " "); do
      i=$((i+1))
      if [ -z "${CLIENT_LIST}" ]; then
        CLIENT_LIST=$(printf "%s\n%s\n%s\n" "${CLIENT}" "." 0)
      else
        CLIENT_LIST=$(printf "%s\n%s\n%s\n%s\n" "${CLIENT_LIST}" "${CLIENT}" "." 0)
      fi
    done

    if [ -z "${CLIENT_LIST}" ]; then
      TITLE="Onion Service - INFO"
      TEXT_NO_CLIENT="\nNo client exist inside the intersection of the chosen services."
      dialog --backtitle "${BACKTITLE}" --title "${TITLE}" --msgbox "${TEXT_NO_CLIENT}" 10 50
    else
      CHOICE_CLIENT=$(dialog --backtitle "${BACKTITLE}" --title "${TITLE}" --checklist "${MENU}" \
      "$((i+7))" 50 "${CHOICE_HEIGHT}" ${CLIENT_LIST} 2>&1 >/dev/tty)
    fi

    if [ ! -z "${CHOICE_CLIENT}" ]; then
      SERVICE_NAME_LIST=$(printf %s"${CHOICE_SERVICE}" | sed "s/ /,/g")
      CLIENT_NAME_LIST=$(printf %s"${CHOICE_CLIENT}" | sed 's/ /,/g')
    fi
  fi
}


auth_client_menu(){
  for ONION_AUTH in $(sudo -u "${DATA_DIR_OWNER}" ls "${CLIENT_ONION_AUTH_DIR}"/ | cut -d '.' -f1); do
    i=$((i+1))
    ONION_AUTH_LIST=$(printf "%s\n%s\n%s\n%s\n" "${ONION_AUTH_LIST}" "${ONION_AUTH}" "." 0)
  done

  if [ "${#ONION_AUTH_LIST}" -eq 0 ]; then
    TITLE="Onion Service - INFO"
    TEXT_NO_CLIENT="\nThe folder ClientOnionAuthDir is empty.\n\nYou don't have any '.auth_private' file inside\n${CLIENT_ONION_AUTH_DIR}"
    dialog  --backtitle "${BACKTITLE}" --title "${TITLE}" --msgbox "${TEXT_NO_CLIENT}" 10 50
  else
    MENU="Use spacebar to select:"
    TITLE="Onion Service - INFO"
    CHOICE_ONION_AUTH=$(dialog --title "${TITLE}" --checklist "${MENU}" \
    "$((i+7))" 80 2 ${ONION_AUTH_LIST} 2>&1 >/dev/tty)
    [ ! -z "${CHOICE_ONION_AUTH}" ] && ONION_AUTH_NAME_LIST=$(printf %s"${ONION_AUTH_NAME_LIST}" | sed "s/ /,/g")
  fi
}


md_menu(){
  for MD in "${ONIONSERVICE_PWD}"/text/*.md; do
    i=$((i+1))
    MD_LIST=$(printf "%s\n%s\n%s\n" "${MD_LIST}" "${MD##*/}" ".")
  done

  TITLE="Markdown guides"
  MENU="Select a guide:"
  CHOICE_MD=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
  --menu "${MENU}" "$((i+7))" 50 10 ${MD_LIST} 2>&1 >/dev/tty)

  [ ! -z "${CHOICE_MD}" ] && pandoc "${ONIONSERVICE_PWD}"/text/"${CHOICE_MD}" | lynx -stdin
}

###########################

TITLE="Onion Services - Main Menu"
MENU="Use spacepar to select:"
BACKTITLE="Onion Services Manager"

if [ -z "$(sudo -u "${DATA_DIR_OWNER}" ls "${DATA_DIR_HS}"/)" ]; then
	CHOICE_MAIN=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
  --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" 13 80 2 \
  "MAN" "Manual pages for the onionservice-cli" \
  "GUIDES" "Markdown guides by Tor Project Organization and Riseup" \
  "ACTIVATE" "Activate a hidden service" \
  "AUTH_CLIENT" "Manage your client keys of remote service" \
  "VANGUARDS" "Add to protect against traffic analysis" \
  "IMPORT" "Import your hidden service data directory" \
  2>&1 >/dev/tty)
else
	CHOICE_MAIN=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
  --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" 19 80 2 \
  "MAN" "Manual pages for the onionservice-cli" \
  "GUIDES" "Markdown guides by Tor Project Organization and Riseup" \
  "ACTIVATE" "Activate a hidden service" \
  "DEACTIVATE" "Deactivate chosen onion service" \
  "RENEW" "Renew onion service address" \
  "AUTH_SERVER" "Add or Remove client authorization from your service" \
  "AUTH_CLIENT" "Manage your client keys of remote service" \
  "CREDENTIALS" "See credentials (onion address, authorized clients)" \
  "VANGUARDS" "Add to protect against traffic analysis" \
  "LOCATION" "Guided steps to add onion-location to your plainnet website" \
  "IMPORT" "Import backup from another machine" \
  "EXPORT" "Export backup to another machine" \
  2>&1 >/dev/tty)
fi


if [ ! -z "${CHOICE_MAIN}" ]; then

  case "${CHOICE_MAIN}" in

    MAN)
      man "${ONIONSERVICE_PWD}"/text/onionservice-cli.1
    ;;

    GUIDES)
      md_menu
    ;;

    ## TODO: purge
    DEACTIVATE)
      service_menu checklist
      [ ! -z "${SERVICE_NAME_LIST}" ] && sh "${ONIONSERVICE_PWD}"/onionservice-cli off "${SERVICE_NAME_LIST}"
    ;;

    RENEW)
      service_menu checklist
      [ ! -z "${SERVICE_NAME_LIST}" ] && sh "${ONIONSERVICE_PWD}"/onionservice-cli renew "${SERVICE_NAME_LIST}"
    ;;

    CREDENTIALS)
      service_menu checklist
      [ ! -z "${SERVICE_NAME_LIST}" ] && sh "${ONIONSERVICE_PWD}"/onionservice-cli credentials "${SERVICE_NAME_LIST}"
    ;;

    LOCATION)
      ## this should be only one service
      service_menu menu
      if [ ! -z "${SERVICE_NAME_LIST}" ]; then
        TITLE="Onion-Location"
        CHOICE_ACTION=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
        --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" 10 50 "${CHOICE_HEIGHT}" \
        "NGINX" "Nginx web server header" \
        "APACHE" "Apache web server header" \
        "HTML" "hmtl <meta> http-equiv attribute" \
        2>&1 >/dev/tty)
        [ ! -z "${CHOICE_ACTION}" ] && sh "${ONIONSERVICE_PWD}"/onionservice-cli location "${SERVICE_NAME_LIST}" "${CHOICE_ACTION}"
      fi
    ;;

    VANGUARDS)
      TITLE="Vanguards"
      CHOICE_ACTION=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" 11 50 "${CHOICE_HEIGHT}" \
      "INSTALL" "Use Vanguards protections" \
      "LOGS" "Follow vanguards logs" \
      "UPGRADE" "Uprade and rever to commit hash" \
      "REMOVE" "Delete the Vanguards directory" \
      2>&1 >/dev/tty)
      [ ! -z "${CHOICE_ACTION}" ] && sh "${ONIONSERVICE_PWD}"/onionservice-cli vanguards "${CHOICE_ACTION}"
    ;;

    IMPORT)
      sh "${ONIONSERVICE_PWD}"/onionservice-cli backup integrate
    ;;

    EXPORT)
      sh "${ONIONSERVICE_PWD}"/onionservice-cli backup create
    ;;

    ACTIVATE)

      TITLE="Service Activation"
      MENU="Choose socket type:"

      SOCKET_CHOICE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --menu "${MENU}" 9 70 8 \
      "UNIX" "unix:path (more secure)" \
      "TCP" "addr:port (leak onion address to the local network)" \
      3>&1 1>&2 2>&3)

      SERVICE_MSG="\nName your service directory in one string and no space.\n(e.g.: torbox.ch)"
      UNIX_PORT_MSG="\nYou are able to configure up to two virtual ports. Insert them separated by space. (e.g.: 80 443)"
      TCP_PORT_MSG="\nYou are able to configure up to two virtual ports and targets, being only one virtual port required to create a service.
      \nInsert them separated by space in the following order:\nVIRPORT TARGET VIRTPORT2 TARGET2\n(e.g.: 80 5000 443 5001) (e.g.: 80 192.168.5.10:5000 443 192.168.5.10:5001)"

      case "${SOCKET_CHOICE}" in

        UNIX)
          SERVICE_NAME=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${SERVICE_MSG}" 10 60 3>&1 1>&2 2>&3)
          if [ ! -z "${SERVICE_NAME}" ]; then
            SERVICE_PORTS=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
            --inputbox "${UNIX_PORT_MSG}" 10 60 3>&1 1>&2 2>&3)
            [ ! -z "${SERVICE_PORTS}" ] \
            && sh "${ONIONSERVICE_PWD}"/onionservice-cli on unix "${SERVICE_NAME}" ${SERVICE_PORTS}
          fi
        ;;

        TCP)
          SERVICE_NAME=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${SERVICE_MSG}" 10 60 3>&1 1>&2 2>&3)
          if [ ! -z "${SERVICE_NAME}" ]; then
            SERVICE_PORTS=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
            --inputbox "${TCP_PORT_MSG}" 13 80 3>&1 1>&2 2>&3)
            [ ! -z "${SERVICE_PORTS}" ] \
            && sh "${ONIONSERVICE_PWD}"/onionservice-cli on tcp "${SERVICE_NAME}" ${SERVICE_PORTS}
          fi
        ;;

        *)
          exit 0
      esac
    ;;

    AUTH_SERVER)
      TITLE="Client Authorization - Server"
      MENU="\nAs the onion service operator, manage client authorization to your services"
      AUTH_TYPE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --ok-label "Select" --cancel-label "Cancel" --menu "${MENU}" 13 60 2 \
      "LIST" "List all clients for specific HiddenService" \
      "GEN" "Generate a new key pair (public and private key)" \
      "PUB" "Register the client public key" \
      "DEL" "Remove a client" \
      2>&1 >/dev/tty)

      case "${AUTH_TYPE}" in

        LIST)
          service_menu checklist
          [ ! -z "${SERVICE_NAME_LIST}" ] && sh "${ONIONSERVICE_PWD}"/onionservice-cli auth server list "${SERVICE_NAME_LIST}"
        ;;

        GEN)
          service_menu checklist
          if [ ! -z "${SERVICE_NAME_LIST}" ]; then
            TITLE="Client Authorization - Server - Generate"
            MENU="Client(s) name(s) delimited by space or/and comma (e.g.: alice, bob, carol)"
            CLIENT_NAME_LIST=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
            --inputbox "${MENU}" 10 50 3>&1 1>&2 2>&3)
            ## separate spaced strings by comma and delete sequential commas and spaces
            CLIENT_NAME_LIST=$(printf %s"${CLIENT_NAME_LIST}" | cut -f1- -d ' ' --output-delimiter=',')
            CLIENT_NAME_LIST=$(printf %s"${CLIENT_NAME_LIST}" | tr -d ' ' | tr -s ',' ',')
          fi
          { [ ! -z "${SERVICE_NAME_LIST}" ] || [ ! -z "${CLIENT_NAME_LIST}" ]; }\
          && sh "${ONIONSERVICE_PWD}"/onionservice-cli auth server on "${SERVICE_NAME_LIST}" ${CLIENT_NAME_LIST}
        ;;

        PUB)
          service_menu menu
          if [ ! -z "${SERVICE_NAME_LIST}" ]; then
            TITLE="Client Authorization - Server - Pub"
            MENU="Client name (e.g.: alice)"
            CLIENT_NAME_LIST=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
            --inputbox "${MENU}" 10 50 3>&1 1>&2 2>&3)
            TITLE="Client Authorization - Server - Pub"
            MENU="Client public key in base32:"
            CLIENT_PUB_KEY=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
            --inputbox "${MENU}" 10 50 3>&1 1>&2 2>&3)
          fi
          { [ ! -z "${SERVICE_NAME_LIST}" ] || [ ! -z "${CLIENT_NAME_LIST}" ] || [ ! -z "${CLIENT_PUB_KEY}" ]; } \
          && sh "${ONIONSERVICE_PWD}"/onionservice-cli auth server on "${SERVICE_NAME_LIST}" ${CLIENT_NAME_LIST} "${CLIENT_PUB_KEY}"
        ;;

        DEL)
          auth_server_menu
          [ ! -z "${CLIENT_NAME_LIST}" ] && sh "${ONIONSERVICE_PWD}"/onionservice-cli auth server on "${SERVICE_NAME_LIST}" "${CLIENT_NAME_LIST}"
        ;;

        *)
          exit 0
      esac
    ;;

    AUTH_CLIENT)
      TITLE="Client Authorization - Client"
      MENU="As the onion service client: Would you like to 'add' or 'remove' authorization from a client?"
      AUTH_TYPE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --ok-label "Select" --cancel-label "Cancel" --menu "${MENU}" 12 80 4 \
      "LIST" "List all the authorizations inside ClientOnionAuthDir" \
      "GEN" "Generate a new key pair (public and private key)" \
      "PRIV" "Register your private key" \
      "DEL" "Remove expired authorization" \
      2>&1 >/dev/tty)

      case "${AUTH_TYPE}" in

        LIST)
          sh "${ONIONSERVICE_PWD}"/onionservice-cli auth client list
        ;;

        GEN)
          MENU="\nInsert the onion address of the service you want to authenticate:"
          ONION_HOSTNAME=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${MENU}" 9 80 3>&1 1>&2 2>&3)
          [ ! -z "${ONION_HOSTNAME}" ] && sh "${ONIONSERVICE_PWD}"/onionservice-cli auth client on "${ONION_HOSTNAME}"
        ;;

        PRIV)
          MENU="\nInsert the onion address of the service you want to authenticate:"
          ONION_HOSTNAME=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${MENU}" 9 80 3>&1 1>&2 2>&3)
          MENU="Insert the client's private key:"
          CLIENT_PRIV_KEY=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${MENU}" 9 80 3>&1 1>&2 2>&3)
          { [ ! -z "${ONION_HOSTNAME}" ] || [ ! -z "${CLIENT_PRIV_KEY}" ]; } \
          && sh "${ONIONSERVICE_PWD}"/onionservice-cli auth client on "${ONION_HOSTNAME}" "${CLIENT_PRIV_KEY}"
        ;;

        DEL)
          auth_client_menu
          [ ! -z "${ONION_AUTH_NAME_LIST}" ] && sh "${ONIONSERVICE_PWD}"/onionservice-cli auth client off "${ONION_AUTH_NAME_LIST}"
        ;;

        *)
          exit 0
      esac
    ;;

    *)
      exit 0
  esac
else
  exit 0
fi

sh "${ONIONSERVICE_PWD}"/onionservice-tui