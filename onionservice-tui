#!/bin/sh
set -x
set -e
## This file is part of onionservice, an easy to use Tor hidden services manager.
##
## Copyright (C) 2021 onionservice developers (GPLv3)
## Github:  https://github.com/nyxnor/onionservice
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it is useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.
##
## DESCRIPTION
## This file lets you manage your authorized clients for hidden services
## It is a CLI for the onionservice-cli with everything integrated in this menu
##
## SYNTAX
## sh onionservice-tui
##
###########################
######## FUNCTIONS ########

## include lib
. "$(dirname "$(realpath "${0}")")"/onion.lib


prepare_derived_menu(){
  i=0
  INSTRUCTIONS="Use spacebar to select"
  HEIGHT=19
  WIDTH=50
  CHOICE_HEIGHT=$((CHOICE_HEIGHT-2))
}


service_menu(){
  prepare_derived_menu

  for SERVICE in $(sudo -u "${DATA_DIR_OWNER}" ls "${DATA_DIR_HS}"/); do
    i=$((i+1))
    SERVICE_ARRAY+=("${i}" "${SERVICE}" 0)
  done

  # SERVICE_ARRAY=""
  # for SERVICE in $(sudo -u "${DATA_DIR_OWNER}" ls "${DATA_DIR_HS}"/); do
  #   i=$((i+1))
  #   SERVICE_ARRAY=$("${SERVICE_ARRAY}" "${i}" "${SERVICE}" "0")
  # done

  CHOICE_SERVICE=$(dialog --title "${TITLE}" --checklist "${INSTRUCTIONS}" \
  ${HEIGHT} ${WIDTH} ${CHOICE_HEIGHT} "${SERVICE_ARRAY[@]}" 2>&1 >/dev/tty)

  if [ ! -z "${CHOICE_SERVICE}" ]; then
    SERVICE_NAME_LIST=""
    while [ "${i}" -gt 0 ]; do
      check=0
      check=$(echo "${CHOICE_SERVICE}" | grep -c "${i}")
      printf %s"check mate = ${check}\n"
      k=$((i * 3 -2))
      if [ "${check}" -eq 1 ]; then
        SERVICE=("${SERVICE_ARRAY[$k]}")
        SERVICE_NAME_LIST="${SERVICE_NAME_LIST},${SERVICE}"
      fi
      i=$((i-1))
    done
    SERVICE_NAME_LIST=$(printf %s"${SERVICE_NAME_LIST}" | sed 's/^,//g')
  fi
}


auth_server_menu(){
  prepare_derived_menu

  for SERVICE in $(sudo -u "${DATA_DIR_OWNER}" ls "${DATA_DIR_HS}"/); do
    ## only include services that has at least one .auth
    if [ "$(sudo -u "${DATA_DIR_OWNER}" ls "${DATA_DIR_HS}"/"${SERVICE}"/authorized_clients/ | wc -l)" -gt 0 ]; then
      i=$((i+1))
      SERVICE_ARRAY+=("${i}" "${SERVICE}" OFF)
      AUTH_NAME_LIST=$(sudo -u "${DATA_DIR_OWNER}" ls "${DATA_DIR_HS}"/"${SERVICE}"/authorized_clients/ | cut -d '.' -f1)
      AUTH_RAW_ARRAY+=("${AUTH_NAME_LIST}")
    fi
  done

  if [ ${#SERVICE_ARRAY[@]} -eq 0 ]; then
    TITLE="Onion Service - INFO"
    TEXT_NO_CLIENT="None of your services has client authorization."
    dialog --backtitle "${BACKTITLE}" --title "${TITLE}" --msgbox "${TEXT_NO_CLIENT}" 10 50
  else
    CHOICE_SERVICE=$(dialog --title "${TITLE}" --checklist "${INSTRUCTIONS}" \
    ${HEIGHT} ${WIDTH} ${CHOICE_HEIGHT} "${SERVICE_ARRAY[@]}" 2>&1 >/dev/tty)
  fi

  if [ ! -z "${CHOICE_SERVICE}" ]; then

      AUTH_CLEAN_LIST=$(printf "${AUTH_RAW_ARRAY[@]}" | tr ' ' '\n' | cut -d '.' -f1  | sort | uniq -c | tr -s ' ' | tr '\n' ' ' | tr -s ' ' | sed 's/^ //g')
      AUTH_CLEAN_ARRAY+=("${AUTH_CLEAN_LIST}")
      COUNT_AUTH_CLEAN_ARRAY=${#AUTH_CLEAN_ARRAY[@]}

      z=0
      j=$((COUNT_AUTH_CLEAN_ARRAY/2))
      while [ ${j} -gt 0 ]; do
          q=$((j * 2 -2 ))
          n=$((j * 2 -1 ))
          AUTH_QUANTITY=("${AUTH_CLEAN_ARRAY[$q]}")
          AUTH_NAME=("${AUTH_CLEAN_ARRAY[$n]}")
          if [ "${i}" = "${AUTH_QUANTITY}" ]; then
            z=$((z+1))
            AUTH_FINAL_ARRAY+=("${z}" "${AUTH_NAME}" OFF)
          fi
          j=$((j-1))
      done

      if [ "${#AUTH_FINAL_ARRAY[@]}" -eq 0 ]; then
        TITLE="Onion Service - INFO"
        TEXT_NO_CLIENT="No client exist within the ntersection of the chosen services."
        dialog --backtitle "${BACKTITLE}" --title "${TITLE}" --msgbox "${TEXT_NO_CLIENT}" 10 50
      else
        CHOICE_CLIENT=$(dialog --title "${TITLE}" --checklist "${INSTRUCTIONS}" \
        ${HEIGHT} ${WIDTH} ${CHOICE_HEIGHT} "${AUTH_FINAL_ARRAY[@]}" 2>&1 >/dev/tty)
      if [ ! -z "${CHOICE_CLIENT}" ]; then
        SERVICE_NAME_LIST=""
        while [ "${i}" -gt 0 ]; do
          check=0; check=$(printf %s"${CHOICE_SERVICE}" | grep -c "${i}")
          k=$((i * 3 -2))
          if [ "${check}" -eq 1 ]; then
            SERVICE=("${SERVICE_ARRAY[$k]}")
            SERVICE_NAME_LIST="${SERVICE_NAME_LIST},${SERVICE}"
          fi
          i=$((i-1))
        done
        SERVICE_NAME_LIST=$(printf %s"${SERVICE_NAME_LIST}" | sed 's/^,//g')

        CLIENT_NAME_LIST=""
        while [ "${z}" -gt 0 ]; do
            check=0; check=$(printf %s"${CHOICE_CLIENT}" | grep -c "${z}")
            k=$((z * 3 -2))
            if [ "${check}" -eq 1 ]; then
              CLIENT=("${AUTH_FINAL_ARRAY[$k]}")
              CLIENT_NAME_LIST="${CLIENT_NAME_LIST},${CLIENT}"
            fi
            z=$((z-1))
        done
        CLIENT_NAME_LIST=$(printf %s"${CLIENT_NAME_LIST}" | sed 's/^,//g')
      fi
    fi
  fi
}


auth_client_menu(){
  prepare_derived_menu

  for ONION_AUTH in $(sudo -u "${DATA_DIR_OWNER}" ls "${CLIENT_ONION_AUTH_DIR}"/ | cut -d '.' -f1); do
  i=$((i+1))
  ONION_AUTH_ARRAY+=("${i}" "${ONION_AUTH}" OFF)
  done

  if [ "${#ONION_AUTH_ARRAY[@]}" -eq 0 ]; then
    TITLE="Onion Service - INFO"
    TEXT_NO_CLIENT="The folder ${CLIENT_ONION_AUTH_DIR} is empty. You don't have '.auth_private' file."
    dialog  --backtitle "${BACKTITLE}" --title "${TITLE}" --msgbox "${TEXT_NO_CLIENT}" 10 50
  else
    CHOICE_ONION_AUTH=$(dialog --title "${TITLE}" \
    --checklist "${INSTRUCTIONS}" \
    ${HEIGHT} ${WIDTH} ${CHOICE_HEIGHT} \
    "${ONION_AUTH_ARRAY[@]}" 2>&1 >/dev/tty)

    if [ ! -z "${CHOICE_ONION_AUTH}" ]; then
      ONION_AUTH_NAME_LIST=""
      while [ "${i}" -gt 0 ]; do
        check=0; check=$(printf %s"${CHOICE_ONION_AUTH}" | grep -c "${i}")
        k=$((i * 3 -2))
        if [ "${check}" -eq 1 ]; then
          ONION_AUTH=("${ONION_AUTH_ARRAY[$k]}")
          ONION_AUTH_NAME_LIST="${ONION_AUTH_NAME_LIST},${ONION_AUTH}"
        fi
        i=$((i-1))
      done
      ONION_AUTH_NAME_LIST=$(printf %s"${ONION_AUTH_NAME_LIST}" | sed 's/^,//g')
    fi
  fi
}


md_menu(){
  for MD in ./text/*.md; do
    MD_PATH=${MD%*/}
    MD_NAME=$(printf %s"${MD_PATH##*/}" | cut -f1 -d '.')
    MD_ARRAY+=("${MD_NAME}" " ")
  done

  TITLE="Markdown guides"
  MENU="select one guide"
  CHOICE_MD=$(dialog --title "${TITLE}" --menu "${MENU}" 18 40 10 "${MD_ARRAY[@]}" 3>&1 1>&2 2>&3)

  if [ ! -z "${CHOICE_MD}" ]; then
    pandoc "text/${CHOICE_MD}.md" | lynx -stdin
  fi
}

###########################


TITLE="Onion Services - Main Menu"
HEIGHT=19
WIDTH=80
CHOICE_HEIGHT=15
MENU="Select an option:"
BACKTITLE="Onion Services Manager"

if [ -z "$(sudo -u "${DATA_DIR_OWNER}" ls "${DATA_DIR_HS}"/)" ]; then
	CHOICE_MAIN=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
  --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" "${HEIGHT}" "${WIDTH}" "${CHOICE_HEIGHT}" \
  "MAN" "Manual pages for the onionservice-cli" \
  "GUIDES" "Markdown guides by Tor Project Organization and Riseup" \
  "CREATE" "Create and host a hidden service" \
  "IMPORT" "Import your hidden service data directory" \
  "VANGUARDS" "Add to protect against traffic analysis" \
  "AUTH_CLIENT" "Manage your client key of someonelse's service" \
  2>&1 >/dev/tty)
else
	CHOICE_MAIN=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
  --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" "${HEIGHT}" "${WIDTH}" "${CHOICE_HEIGHT}" \
  "MAN" "Manual pages for the onionservice-cli" \
  "GUIDES" "Markdown guides by Tor Project Organization and Riseup" \
  "CREATE" "Host a hidden service" \
  "DELETE" "Delete chosen onion service" \
  "RENEW" "Renew onion service address" \
  "AUTH_SERVER" "Add or Remove client authorization from your service" \
  "AUTH_CLIENT" "Manage your client key of someonelse's service" \
  "CREDENTIALS" "See credentials (onion address, authorized clients)" \
  "VANGUARDS" "Add to protect against traffic analysis" \
  "LOCATION" "Guided steps to add onion-location to your plainnet website" \
  "IMPORT" "Import your hidden service data from another machine" \
  "EXPORT" "Export your hidden service data to another machine" \
  2>&1 >/dev/tty)
fi


if [ ! -z "${CHOICE_MAIN}" ]; then

  case "${CHOICE_MAIN}" in

    MAN)
      man ./text/onionservice-cli.1
    ;;

    GUIDES)
      md_menu
    ;;

    DELETE)
      service_menu
      [ ! -z "${SERVICE_NAME_LIST}" ] && sh onionservice-cli off "${SERVICE_NAME_LIST}"
    ;;

    RENEW)
      service_menu
      [ ! -z "${SERVICE_NAME_LIST}" ] && sh onionservice-cli renew "${SERVICE_NAME_LIST}"
    ;;

    CREDENTIALS)
      service_menu
      [ ! -z "${SERVICE_NAME_LIST}" ] && sh onionservice-cli credentials "${SERVICE_NAME_LIST}"
    ;;

    LOCATION)
        service_menu
        if [ ! -z "${SERVICE_NAME_LIST}" ]; then
          CHOICE_MAIN=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" "${HEIGHT}" "${WIDTH}" "${CHOICE_HEIGHT}" \
          "NGINX" "Nginx web server header" \
          "APACHE" "Apache web server header" \
          "HTML" "hmtl <meta> http-equiv attribute" \
          2>&1 >/dev/tty)
          [ ! -z "${CHOICE_ACTION}" ] && sh onionservice-cli "${SERVICE}" "${ACTION}"
        fi
    ;;

    VANGUARDS)
      CHOICE_MAIN=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" "${HEIGHT}" "${WIDTH}" "${CHOICE_HEIGHT}" \
      "INSTALL" "Install Vanguards protection" \
      "LOGS" "Follow vanguards logs" \
      "UPGRADE" "Uprade and rever to commit hash" \
      "REMOVE" "Delete the Vanguards directory" \
      2>&1 >/dev/tty)
      [ ! -z "${CHOICE_ACTION}" ] && sh onionservice-cli vanguards "${ACTION}"
    ;;

    IMPORT)
      sh onionservice-cli backup integrate
    ;;

    EXPORT)
      sh onionservice-cli backup create
    ;;

    CREATE)

      TITLE="Service Activation"
      MENU="Choose socket type:"

      SOCKET_CHOICE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --menu "${MENU}" 9 70 8 \
      "UNIX" "unix:path (more secure)" \
      "TCP" "addr:port (leak onion address to the local network)" \
      3>&1 1>&2 2>&3)

      if [ ! -z "${SOCKET_CHOICE}" ]; then

        SERVICE_MSG="Name your service (one string, no space. Eg: torbox.ch)"
        VIRTPORT_MSG="Listening on the 1st virtual port number:"
        VIRTPORT2_MSG="Listening on the 2st virtual port number:"
        TARGET_MSG="OPTIONAL -> Redirect incoming traffic to 1st target addr:port"
        TARGET2_MSG="OPTIONAL -> Redirect incoming traffic to 2nd target addr:port2"

        if [ "${SOCKET_CHOICE}" = "UNIX" ]; then
          # Required
          SERVICE_NAME=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${SERVICE_MSG}" 10 60 3>&1 1>&2 2>&3)
          if [ ! -z "${SERVICE_NAME}" ]; then
            VIRTPORT=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
            --inputbox "${VIRTPORT_MSG}" 10 50 3>&1 1>&2 2>&3)
            if [ ! -z "${VIRTPORT}" ]; then
              ## Optional
              VIRTPORT2=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
              --inputbox "${VIRTPORT2_MSG}" 10 50 3>&1 1>&2 2>&3)
              sh onionservice-cli on unix "${SERVICE_NAME}" "${VIRTPORT}" "${VIRTPORT2}"
            fi
          fi

        elif [ "${SOCKET_CHOICE}" = "TCP" ]; then
          # Required
          SERVICE_NAME=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${SERVICE_MSG}" 10 50 3>&1 1>&2 2>&3)
          if [ ! -z "${SERVICE_NAME}" ]; then
            VIRTPORT=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
            --inputbox "${VIRTPORT_MSG}" 10 50 3>&1 1>&2 2>&3)
            if [ ! -z "${VIRTPORT}" ]; then
              TARGET=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
             --inputbox "${TARGET_MSG}" 10 50 3>&1 1>&2 2>&3)
              if [ ! -z "${TARGET}" ]; then
                # Optional
                VIRTPORT2=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
                --inputbox "${VIRTPORT2_MSG}" 10 50 3>&1 1>&2 2>&3)
                if [ ! -z "${VIRTPORT2}" ]; then
                  TARGET2=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
                  --inputbox "${TARGET2_MSG}" 10 50 3>&1 1>&2 2>&3)
                fi
              fi
              sh onionservice-cli on tcp "${SERVICE_NAME}" "${VIRTPORT}" "${TARGET}" "${VIRTPORT2}" "${TARGET2}"
            fi
          fi
        fi
      fi
    ;;

    AUTH_SERVER)
      TITLE="Client Authorization - Server"
      MENU="As the onion service operator: Would you like to 'add' or 'remove' authorization from a client?"
      AUTH_TYPE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --ok-label "Select" --cancel-label "Cancel" --menu "${MENU}" 10 50 2 \
      "LIST" "List all clients for specific HiddenService" \
      "GEN" "Generate a new key pair (public and private key)" \
      "PUB" "Register the client public key" \
      "DEL" "Remove a client" \
      2>&1 >/dev/tty)

      if [ "${AUTH_TYPE}" = "ADD" ]; then
        service_menu
        if [ ! -z "${SERVICE_NAME_LIST}" ]; then
          AUTH_STATUS="on"
          TITLE="Client Authorization - Server - Add"
          DESCRIPTION="Client(s) name(s) delimited by space or/and comma (e.g.: alice, bob, carol)"
          CLIENT_NAME_LIST=("$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${DESCRIPTION}" 10 50 3>&1 1>&2 2>&3)")
          ## separate spaced words by comma and delete sequential commas and spaces
          CLIENT_NAME_LIST=$(cut -f1- -d ' ' --output-delimiter=',' <<< "${CLIENT_NAME_LIST}")
          CLIENT_NAME_LIST=$(printf %s"${CLIENT_NAME_LIST}" | tr -d ' ' | tr -s ',' ',')
        fi
      elif [ "${AUTH_TYPE}" = "DEL" ]; then
        AUTH_STATUS="off"
        auth_server_menu
      fi

      [ ! -z "${CLIENT_NAME_LIST}" ] && sh onionservice-cli auth server "${AUTH_STATUS}" "${SERVICE_NAME_LIST}" "${CLIENT_NAME_LIST}"
    ;;

    AUTH_CLIENT)
      TITLE="Client Authorization - Client - ClientOnionAuthDir"
      MENU="As the onion service client: Would you like to 'add' or 'remove' authorization from a client?"
      AUTH_TYPE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --ok-label "Select" --cancel-label "Cancel" --menu "${MENU}" 12 80 4 \
      "LIST" "List all the authorizations inside ClientOnionAuthDir" \
      "GEN" "Generate a new key pair (public and private key)" \
      "PRIV" "Register your private key" \
      "DEL" "Remove expired authorization" \
      2>&1 >/dev/tty)

      if [ "${AUTH_TYPE}" = "GEN" ]; then
        DESCRIPTION="Insert file name without the suffix '.auth_private'. Recommendation is to refer to the authenticated service."
        AUTH_FILE_NAME=("$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
        --inputbox "${DESCRIPTION}" 10 80 3>&1 1>&2 2>&3)")
        if [ ! -z "${AUTH_FILE_NAME}" ]; then
          DESCRIPTION="Insert private key as instructed by the service operator.\nFormat: <onion-addr-without-.onion-part>:descriptor:x25519:<private-key>"
          AUTH_PRIV_KEY=("$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${DESCRIPTION}" 10 80 3>&1 1>&2 2>&3)")
          if [ ! -z "${AUTH_PRIV_KEY}" ]; then
            sh onionservice-cli auth client on "${AUTH_FILE_NAME}" "${AUTH_PRIV_KEY}"
          fi
        fi
      elif [ "${AUTH_TYPE}" = "DEL" ]; then
        auth_client_menu
        [ ! -z "${ONION_AUTH_NAME_LIST}" ] && sh onionservice-cli auth client off "${ONION_AUTH_NAME_LIST}"

      fi
    ;;

    *)
      exit 0

  esac

fi

# if [ $? -eq 0 ]; then
#     exit 0
# fi

# sh $(realpath ${0})