#!/bin/sh

## This file is part of onionservice, an easy to use Tor hidden services manager.
##
## Copyright (C) 2021 onionservice developers (GPLv3)
## Github:  https://github.com/nyxnor/onionservice
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it is useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.
##
## DESCRIPTION
## This file lets you manage your authorized clients for hidden services
## It is a TUI for the onionservice-cli with everything integrated in this menu
##
## SYNTAX
## sh onionservice-tui
##
###########################
######## FUNCTIONS ########

## include lib
ONIONSERVICE_PWD=
. "${ONIONSERVICE_PWD}"/.onionrc

i=0

folder_menu(){
  i=0
  DIALOG_TYPE="${1}"
  for FOLDER in $(sudo ls /var/www/); do
    i=$((i+1))
    case "${DIALOG_TYPE}" in
      checklist) FOLDER_LIST=$(printf "%s\n%s\n%s\n%s\n" "${FOLDER_LIST}" "${FOLDER}" "." 0);;
      menu)      FOLDER_LIST=$(printf "%s\n%s\n%s\n" "${FOLDER_LIST}" "${FOLDER}" ".");;
    esac
  done

  TITLE="Folder"
  MENU="Use spacebar to select:"
  CHOICE_FOLDER=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" --"${DIALOG_TYPE}" "${MENU}" \
  "$((i+7))" 50 2 ${FOLDER_LIST} 2>&1 >/dev/tty)

  [ ! -z "${CHOICE_FOLDER}" ] && FOLDER_NAME_LIST=$(printf %s"${CHOICE_FOLDER}" | sed "s/ /,/g")
}

service_menu(){
  i=0
  DIALOG_TYPE="${1}"
  for SERVICE in $(sudo -u "${TOR_USER}" ls "${DATA_DIR_HS}"/); do
    i=$((i+1))
    ONION_HOSTNAME_WITHOUT_ONION=$(sudo -u "${TOR_USER}" cat "${DATA_DIR_HS}"/"${SERVICE}"/hostname 2>/dev/null | cut -d '.' -f1)
    case "${DIALOG_TYPE}" in
      checklist) SERVICE_LIST=$(printf "%s\n%s\n%s\n%s\n" "${SERVICE_LIST}" "${SERVICE}" "${ONION_HOSTNAME_WITHOUT_ONION}" 0);;
      menu)      SERVICE_LIST=$(printf "%s\n%s\n%s\n" "${SERVICE_LIST}" "${SERVICE}" "${ONION_HOSTNAME_WITHOUT_ONION}");;
    esac
  done

  TITLE="Onion Services"
  CHOICE_SERVICE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" --"${DIALOG_TYPE}" "${MENU}" \
  "$((i+7))" 80 2 ${SERVICE_LIST} 2>&1 >/dev/tty)

  [ ! -z "${CHOICE_SERVICE}" ] && SERVICE_NAME_LIST=$(printf %s"${CHOICE_SERVICE}" | sed "s/ /,/g")
}


## NOT WORKING, CORRECT THE INTERSECTION
auth_server_menu(){
  i=0
  for SERVICE in $(sudo -u "${TOR_USER}" ls "${DATA_DIR_HS}"/); do
    ## only include services that have at least one client
    CLIENT_EXIST=$(sudo -u "${TOR_USER}" ls "${DATA_DIR_HS}"/"${SERVICE}"/authorized_clients/ | sed "s/\.auth//g")
    if [ ! -z "${CLIENT_EXIST}" ]; then
      i=$((i+1))
      ONION_HOSTNAME_WITHOUT_ONION=$(sudo -u "${TOR_USER}" cat "${DATA_DIR_HS}"/"${SERVICE}"/hostname 2>/dev/null | cut -d '.' -f1)
      SERVICE_LIST=$(printf "%s\n%s\n%s\n%s\n" "${SERVICE_LIST}" "${SERVICE}" "${ONION_HOSTNAME_WITHOUT_ONION}" 0)
      CLIENT_LIST=$(printf "%s\n%s\n" "${CLIENT_LIST}" "${CLIENT_EXIST}")
    fi
  done

  if [ -z "${SERVICE_LIST}" ]; then
    TITLE="Onion Service - INFO"
    MENU="\nNone of your services have client authorization."
    dialog --backtitle "${BACKTITLE}" --title "${TITLE}" --msgbox "${MENU}" 10 50
  else
    TITLE="Client Authorization - Server - Deletion"
    MENU="Use spacebar to select:"
    CHOICE_SERVICE=$(dialog --backtitle "${BACKTITLE}" --title "${TITLE}" --checklist "${MENU}" \
    "$((i+7))" 80 2 ${SERVICE_LIST} 2>&1 >/dev/tty)
  fi

  if [ ! -z "${CHOICE_SERVICE}" ]; then
    SERVICE_TOTAL="${i}"
    i=0
    ## intersection of clients on the chosen services
    for CLIENT in $(printf %s"${CLIENT_LIST}" | tr " " "\n" | sort | uniq -c | tr -s " " | grep " ${SERVICE_TOTAL} " | sed "s/ ${SERVICE_TOTAL} //g" | tr "\n" " "); do
      i=$((i+1))
      if [ -z "${CLIENT_BUILD_LIST}" ]; then
        CLIENT_BUILD_LIST=$(printf "%s\n%s\n%s\n" "${CLIENT}" "." 0)
        echo "CLIENT_BUILD_LIST=${CLIENT_BUILD_LIST}"
      else
        CLIENT_BUILD_LIST=$(printf "%s\n%s\n%s\n%s\n" "${CLIENT_BUILD_LIST}" "${CLIENT}" "." 0)
        echo "CLIENT_BUILD_LIST=${CLIENT_BUILD_LIST}"
      fi
    done

    if [ -z "${CLIENT_BUILD_LIST}" ]; then
      TITLE="Onion Service - INFO"
      TEXT_NO_CLIENT="\nNo client exist inside the intersection of the chosen services."
      dialog --backtitle "${BACKTITLE}" --title "${TITLE}" --msgbox "${TEXT_NO_CLIENT}" 10 50
    else
      CHOICE_CLIENT=$(dialog --backtitle "${BACKTITLE}" --title "${TITLE}" --checklist "${MENU}" \
      "$((i+7))" 50 2 ${CLIENT_BUILD_LIST} 2>&1 >/dev/tty)
    fi

    if [ ! -z "${CHOICE_CLIENT}" ]; then
      SERVICE_NAME_LIST=$(printf %s"${CHOICE_SERVICE}" | sed "s/ /,/g")
      CLIENT_NAME_LIST=$(printf %s"${CHOICE_CLIENT}" | sed 's/ /,/g')
    fi
  fi
}


auth_client_menu(){
  for ONION_AUTH in $(sudo -u "${TOR_USER}" ls "${CLIENT_ONION_AUTH_DIR}"/ | cut -d '.' -f1); do
    i=$((i+1))
    ONION_AUTH_LIST=$(printf "%s\n%s\n%s\n%s\n" "${ONION_AUTH_LIST}" "${ONION_AUTH}" "." 0)
  done

  if [ "${#ONION_AUTH_LIST}" -eq 0 ]; then
    TITLE="Onion Service - INFO"
    TEXT_NO_CLIENT="\nThe folder ClientOnionAuthDir is empty.\n\nYou don't have any '.auth_private' file inside\n${CLIENT_ONION_AUTH_DIR}"
    dialog  --backtitle "${BACKTITLE}" --title "${TITLE}" --msgbox "${TEXT_NO_CLIENT}" 10 50
  else
    MENU="Use spacebar to select:"
    TITLE="Onion Service - INFO"
    CHOICE_ONION_AUTH=$(dialog --title "${TITLE}" --checklist "${MENU}" \
    "$((i+7))" 80 2 ${ONION_AUTH_LIST} 2>&1 >/dev/tty)
    [ ! -z "${CHOICE_ONION_AUTH}" ] && ONION_AUTH_NAME_LIST=$(printf %s"${ONION_AUTH_NAME_LIST}" | sed "s/ /,/g")
  fi
}


md_menu(){
  for MD in "${ONIONSERVICE_PWD}"/text/*.md; do
    i=$((i+1))
    MD_LIST=$(printf "%s\n%s\n%s\n" "${MD_LIST}" "${MD##*/}" ".")
  done

  TITLE="Markdown guides"
  MENU="Select a guide:"
  CHOICE_MD=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
  --menu "${MENU}" "$((i+7))" 50 10 ${MD_LIST} 2>&1 >/dev/tty)

  [ ! -z "${CHOICE_MD}" ] && pandoc "${ONIONSERVICE_PWD}"/text/"${CHOICE_MD}" | lynx -stdin
}

###########################

TITLE="Onion Services - Main Menu"
MENU="Use spacepar to select:"
BACKTITLE="Onion Services Manager"

if [ -z "$(sudo -u "${TOR_USER}" ls "${DATA_DIR_HS}"/)" ]; then
	CHOICE_MAIN=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
  --ok-label "Select" --no-cancel --menu "${MENU}" 15 80 2 \
  "MAN" "Manual pages for the onionservice-cli" \
  "GUIDES" "Markdown guides by Tor Project Organization and Riseup" \
  "ACTIVATE" "Activate a onion service" \
  "AUTH_CLIENT" "Manage your client keys of remote service" \
  "VANGUARDS" "Add to protect against traffic analysis" \
  "IMPORT" "Import backup from another machine" \
  "QUIT" "Exit menu to the terminal" \
  2>&1 >/dev/tty)
else
	CHOICE_MAIN=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
  --ok-label "Select" --no-cancel --menu "${MENU}" 21 80 2 \
  "MAN" "Manual pages for the onionservice-cli" \
  "GUIDES" "Markdown guides by Tor Project Organization and Riseup" \
  "ACTIVATE" "Activate a onion service" \
  "DEACTIVATE" "Deactivate chosen onion service" \
  "RENEW" "Renew onion service address" \
  "AUTH_SERVER" "Add or Remove client authorization from your service" \
  "AUTH_CLIENT" "Manage your client keys of remote service" \
  "CREDENTIALS" "See credentials (onion address, authorized clients)" \
  "WEB_SERVER" "Serve your website using one of your onion services" \
  "VANGUARDS" "Add to protect against traffic analysis" \
  "LOCATION" "Guided steps to add onion-location to your plainnet website" \
  "IMPORT" "Import backup from another machine" \
  "EXPORT" "Export backup to another machine" \
  "QUIT" "Exit menu to the terminal" \
  2>&1 >/dev/tty)
fi


case "${CHOICE_MAIN}" in

  MAN)
    man "${ONIONSERVICE_PWD}"/text/onionservice-cli.1
  ;;


  GUIDES)
    md_menu
  ;;


  ACTIVATE)

    TITLE="Onion Service - Activation"
    MENU="Choose socket type:"
    SOCKET_CHOICE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
    --menu "${MENU}" 9 70 8 \
    "UNIX" "unix:path (more secure)" \
    "TCP" "addr:port (leak onion address to the local network)" \
    3>&1 1>&2 2>&3)

    SERVICE_MSG="\nName your service directory in one string and no space.\n(e.g.: torbox.ch)"
    UNIX_PORT_MSG="\nYou are able to configure up to two virtual ports. Insert them separated by space. (e.g.: 80 443)"
    TCP_PORT_MSG="\nYou are able to configure up to two virtual ports and targets, being only one virtual port required to create a service.
    \nInsert them separated by space in the following order:\nVIRPORT TARGET VIRTPORT2 TARGET2\n(e.g.: 80 5000 443 5001) (e.g.: 80 192.168.5.10:5000 443 192.168.5.10:5001)"

    case "${SOCKET_CHOICE}" in

      UNIX)
        SERVICE_NAME=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
        --inputbox "${SERVICE_MSG}" 10 60 3>&1 1>&2 2>&3)
        if [ ! -z "${SERVICE_NAME}" ]; then
          SERVICE_PORTS=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${UNIX_PORT_MSG}" 10 60 3>&1 1>&2 2>&3)
          if [ ! -z "${SERVICE_PORTS}" ]; then
            clear
            sh "${ONIONSERVICE_PWD}"/onionservice-cli on unix "${SERVICE_NAME}" ${SERVICE_PORTS}
            printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
          fi
        fi
      ;;

      TCP)
        SERVICE_NAME=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
        --inputbox "${SERVICE_MSG}" 10 60 3>&1 1>&2 2>&3)
        if [ ! -z "${SERVICE_NAME}" ]; then
          SERVICE_PORTS=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${TCP_PORT_MSG}" 13 80 3>&1 1>&2 2>&3)
          if [ ! -z "${SERVICE_PORTS}" ]; then
            sh "${ONIONSERVICE_PWD}"/onionservice-cli on tcp "${SERVICE_NAME}" ${SERVICE_PORTS}
            printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
          fi
        fi
      ;;

    esac
  ;;


  DEACTIVATE)
    service_menu checklist
    if [ ! -z "${SERVICE_NAME_LIST}" ]; then
      TITLE="Onion Service - Deactivation"
      MENU="\nWould you also like to DELETE (purge) the HiddenServiceDir?\nIf YES: All the directory data, including hidden service keys and clients will be deleted permanently (you won't be able to use the same onion address).\nIf NO (default): Service will be deactivated, lines from the torrc deleted but the folder will be kept."
      if CHOICE_PURGE="$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --defaultno --yesno "${MENU}" 11 80 2>&1 >/dev/tty)"; then CHOICE_PURGE="purge"; fi
      clear
      sh "${ONIONSERVICE_PWD}"/onionservice-cli off "${SERVICE_NAME_LIST}" "${CHOICE_PURGE}"
      printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
    fi
  ;;


  RENEW)
    service_menu checklist
    if [ ! -z "${SERVICE_NAME_LIST}" ]; then
      clear
      sh "${ONIONSERVICE_PWD}"/onionservice-cli renew "${SERVICE_NAME_LIST}"
      printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
    fi
  ;;


  AUTH_SERVER)
    TITLE="Client Authorization - Server"
    MENU="\nAs the onion service operator, manage client authorization to your services"
    AUTH_TYPE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
    --ok-label "Select" --cancel-label "Cancel" --menu "${MENU}" 13 60 2 \
    "LIST" "List all clients for specific HiddenService" \
    "GEN" "Generate a new key pair (public and private key)" \
    "PUB" "Register the client public key" \
    "DEL" "Remove a client" \
    2>&1 >/dev/tty)

    case "${AUTH_TYPE}" in

      LIST)
        service_menu checklist
        if [ ! -z "${SERVICE_NAME_LIST}" ]; then
          clear
          sh "${ONIONSERVICE_PWD}"/onionservice-cli auth server list "${SERVICE_NAME_LIST}"
          printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
        fi
      ;;

      GEN)
        service_menu checklist
        if [ ! -z "${SERVICE_NAME_LIST}" ]; then
          TITLE="Client Authorization - Server - Generate"
          MENU="Client(s) name(s) delimited by space or/and comma (e.g.: alice, bob, carol)"
          CLIENT_NAME_LIST=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${MENU}" 10 50 3>&1 1>&2 2>&3)
          ## separate spaced strings by comma and delete sequential commas and spaces
          #CLIENT_NAME_LIST=$(printf %s"${CLIENT_NAME_LIST}" | cut -f1- -d ' ' --output-delimiter=',')
          CLIENT_NAME_LIST=$(printf %s"${CLIENT_NAME_LIST}" | sed "s/ /,/g")
          CLIENT_NAME_LIST=$(printf %s"${CLIENT_NAME_LIST}" | tr -d ' ' | tr -s ',' ',')
          if { [ ! -z "${SERVICE_NAME_LIST}" ] && [ ! -z "${CLIENT_NAME_LIST}" ]; }; then
            clear
            sh "${ONIONSERVICE_PWD}"/onionservice-cli auth server on "${SERVICE_NAME_LIST}" ${CLIENT_NAME_LIST}
            printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
          fi
        fi
      ;;

      PUB)
        service_menu menu
        if [ ! -z "${SERVICE_NAME_LIST}" ]; then
          TITLE="Client Authorization - Server - Pub"
          MENU="Client name (e.g.: alice)"
          CLIENT_NAME_LIST=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${MENU}" 10 50 3>&1 1>&2 2>&3)
          TITLE="Client Authorization - Server - Pub"
          MENU="Client public key in base32:"
          CLIENT_PUB_KEY=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
          --inputbox "${MENU}" 10 50 3>&1 1>&2 2>&3)
          if { [ ! -z "${SERVICE_NAME_LIST}" ] && [ ! -z "${CLIENT_NAME_LIST}" ] && [ ! -z "${CLIENT_PUB_KEY}" ]; }; then
            clear
            sh "${ONIONSERVICE_PWD}"/onionservice-cli auth server on "${SERVICE_NAME_LIST}" ${CLIENT_NAME_LIST} "${CLIENT_PUB_KEY}"
            printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
          fi
        fi
      ;;

      DEL)
        auth_server_menu
        if [ ! -z "${CLIENT_NAME_LIST}" ]; then
          clear
          sh "${ONIONSERVICE_PWD}"/onionservice-cli auth server off "${SERVICE_NAME_LIST}" "${CLIENT_NAME_LIST}"
          printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
        fi
      ;;

    esac
  ;;


  AUTH_CLIENT)
    TITLE="Client Authorization - Client"
    MENU="As the onion service client: Would you like to 'add' or 'remove' authorization from a client?"
    AUTH_TYPE=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
    --ok-label "Select" --cancel-label "Cancel" --menu "${MENU}" 12 80 4 \
    "LIST" "List all the authorizations inside ClientOnionAuthDir" \
    "GEN" "Generate a new key pair (public and private key)" \
    "PRIV" "Register your private key" \
    "DEL" "Remove expired authorization" \
    2>&1 >/dev/tty)

    case "${AUTH_TYPE}" in

      LIST)
        sh "${ONIONSERVICE_PWD}"/onionservice-cli auth client list
        printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
      ;;

      GEN)
        MENU="\nInsert the onion address of the service you want to authenticate:"
        ONION_HOSTNAME=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
        --inputbox "${MENU}" 9 80 3>&1 1>&2 2>&3)
        if [ ! -z "${ONION_HOSTNAME}" ]; then
          clear
          sh "${ONIONSERVICE_PWD}"/onionservice-cli auth client on "${ONION_HOSTNAME}"
          printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
        fi
      ;;

      PRIV)
        MENU="\nInsert the onion address of the service you want to authenticate:"
        ONION_HOSTNAME=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
        --inputbox "${MENU}" 9 80 3>&1 1>&2 2>&3)
        MENU="Insert the client's private key:"
        CLIENT_PRIV_KEY=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
        --inputbox "${MENU}" 9 80 3>&1 1>&2 2>&3)
        if { [ ! -z "${ONION_HOSTNAME}" ] && [ ! -z "${CLIENT_PRIV_KEY}" ]; }; then
          clear
          sh "${ONIONSERVICE_PWD}"/onionservice-cli auth client on "${ONION_HOSTNAME}" "${CLIENT_PRIV_KEY}"
          printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
        fi
      ;;

      DEL)
        auth_client_menu
        if [ ! -z "${ONION_AUTH_NAME_LIST}" ]; then
          clear
          sh "${ONIONSERVICE_PWD}"/onionservice-cli auth client off "${ONION_AUTH_NAME_LIST}"
          printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
        fi
      ;;

    esac
  ;;


  CREDENTIALS)
    service_menu checklist
    if [ ! -z "${SERVICE_NAME_LIST}" ]; then
      clear
      sh "${ONIONSERVICE_PWD}"/onionservice-cli credentials "${SERVICE_NAME_LIST}"
      printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
    fi
  ;;


  LOCATION)
    service_menu menu
    if [ ! -z "${SERVICE_NAME_LIST}" ]; then
      TITLE="Onion-Location"
      CHOICE_ACTION=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" 10 50 2 \
      "NGINX" "Nginx web server header" \
      "APACHE" "Apache web server header" \
      "HTML" "hmtl <meta> http-equiv attribute" \
      2>&1 >/dev/tty)
      if [ ! -z "${CHOICE_ACTION}" ]; then
        clear
        sh "${ONIONSERVICE_PWD}"/onionservice-cli location "${SERVICE_NAME_LIST}" "${CHOICE_ACTION}"
        printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
      fi
    fi
  ;;


  WEB_SERVER)
    service_menu menu
    if [ ! -z "${SERVICE_NAME_LIST}" ]; then
      folder_menu menu
      if [ ! -z "${FOLDER_NAME_LIST}" ]; then
        TITLE="Web server - Status"
        MENU="\nWould you like to activate or deactivate serving a web site?"
        STATUS=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" --menu "${MENU}" 11 50 2 \
        "ON" "Serve web site" \
        "OFF" "Stop serving web site" \
        2>&1 >/dev/tty)
        if [ ! -z "${STATUS}" ]; then
          clear
          sh "${ONIONSERVICE_PWD}"/onionservice-cli "${WEBSERVER}" "${STATUS}" "${SERVICE_NAME_LIST}" "${FOLDER_NAME_LIST}"
          printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
        fi
      fi
    fi
  ;;


  VANGUARDS)
    TITLE="Vanguards"
    if [ "$(sudo -u "${TOR_USER}" ls "${DATA_DIR}"/vanguards)" = "" ]; then
      CHOICE_ACTION=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" 8 50 2 \
      "INSTALL" "Use Vanguards protections" 2>&1 >/dev/tty)
    else
      CHOICE_ACTION=$(dialog --clear --backtitle "${BACKTITLE}" --title "${TITLE}" \
      --ok-label "Select" --cancel-label "Exit" --menu "${MENU}" 10 50 2 \
      "LOGS" "Follow vanguards logs" \
      "UPGRADE" "Set new config and upgrade" \
      "REMOVE" "Delete the Vanguards directory" \
      2>&1 >/dev/tty)
    fi

    if [ "${CHOICE_ACTION}" = "LOGS" ]; then
      clear
      trap 'sh "${ONIONSERVICE_PWD}"/onionservice-tui; exit 0' INT
      sudo tail -f -n 25 /var/log/tor/vanguards.log
    elif [ ! -z "${CHOICE_ACTION}" ]; then
      clear
      sh "${ONIONSERVICE_PWD}"/onionservice-cli vanguards "${CHOICE_ACTION}"
      printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
    fi
  ;;


  IMPORT)
    sh "${ONIONSERVICE_PWD}"/onionservice-cli backup integrate
    printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
  ;;


  EXPORT)
    sh "${ONIONSERVICE_PWD}"/onionservice-cli backup create
    printf %s"${FOREGROUND_YELLOW}\nPress ENTER to go back to the TUI: ${UNSET_FORMAT}" >&2; read -r confirmation
  ;;


  QUIT)
    clear
    exit 0
  ;;

esac

sh "${ONIONSERVICE_PWD}"/onionservice-tui