.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "ONIONSERVICE-CLI" "1" "September 2069" "onionservice-cli 0.0.1" ""
.hy
.SH NAME
.PP
onionservice-cli - dinamically manage your onion services with a POSIX
compliant shell
.SH SYNOPSIS
.PP
\f[B]onionservice-cli\f[R] [COMMAND] <\f[I]OPTION\f[R]>
.PD 0
.P
.PD
\f[B]onionservice-cli setup torrc\f[R]
.PD 0
.P
.PD
\f[B]onionservice-cli on tcp\f[R] [SERV] [VIRTPORT] <\f[I]TARGET\f[R]>
<\f[I]VIRTPORT2\f[R]> <\f[I]TARGET2\f[R]>
.PD 0
.P
.PD
\f[B]onionservice-cli on unix\f[R] [SERV] [VIRTPORT]
<\f[I]VIRTPORT2\f[R]>
.PD 0
.P
.PD
\f[B]onionservice-cli off\f[R] [SERV1,SERV2,\&...] <\f[I]purge\f[R]>
.PD 0
.P
.PD
\f[B]onionservice-cli list\f[R] [all-services|SERV1,SERV2,\&...]
<\f[I]no-qr\f[R]>
.PD 0
.P
.PD
\f[B]onionservice-cli renew\f[R] [all-services|SERV1,SERV2,\&...]
.PD 0
.P
.PD
\f[B]onionservice-cli auth server on\f[R] [SERV] [CLIENT]
<\f[I]CLIENT_PUB_KEY\f[R]>
.PD 0
.P
.PD
\f[B]onionservice-cli auth server on\f[R]
[all-services|SERV1,SERV2,\&...] [CLIENT1,CLIENT2,\&...]
.PD 0
.P
.PD
\f[B]onionservice-cli auth server off\f[R]
[all-services|SERV1,SERV2,\&...] [all-clients|CLIENT1,CLIENT2,\&...]
.PD 0
.P
.PD
\f[B]onionservice-cli auth server list\f[R]
[all-services|SERV1,SERV2,\&...]
.PD 0
.P
.PD
\f[B]onionservice-cli auth client on\f[R] [ONION]
<\f[I]CLIENT_PRIV_KEY\f[R]>
.PD 0
.P
.PD
\f[B]onionservice-cli auth client off\f[R] [ONION1,ONION2,\&...]
.PD 0
.P
.PD
\f[B]onionservice-cli auth client list\f[R]
.PD 0
.P
.PD
\f[B]onionservice-cli web on\f[R] [SERV] [FOLDER]
.PD 0
.P
.PD
\f[B]onionservice-cli web off\f[R] [SERV]
.PD 0
.P
.PD
\f[B]onionservice-cli web list\f[R]
.PD 0
.P
.PD
\f[B]onionservice-cli location\f[R] [SERV] [nginx|apache|html]
.PD 0
.P
.PD
\f[B]onionservice-cli backup\f[R] [create|integrate]
.PD 0
.P
.PD
\f[B]onionservice-cli vanguards\f[R] [install|logs|upgrade|remove]
.PD 0
.P
.PD
\f[B]onionservice-cli\f[R] <\f[I]-h|-help|\[en]help|help\f[R]>
.SH DESCRIPTION
.PP
\f[B]onionservice-cli\f[R] is a part of OnionService, a combination of
POSIX compliant scripts helps the interaction with onion service
configuration and files to speed up usage and avoid misconfiguration.
The project is composed by 3 scripts, one being the menu
(onionservice-tui), one being the configuration (.onionrc) and the last
one being the main handler (onionservice-cli).
The menu is dynamically produced depending on how much services
(<\f[I]HiddenServicesDataDir\f[R]>/<\f[I]HiddenServiceDir\f[R]>) or
clients you have (<\f[I]HiddenServiceDir\f[R]>/authorized_clients/) or
clients you are (ClientOnionAuthDir).
The .onionrc is used to source the global variables to be used in the
other scripts, such as where the hidden services are located, the owner
of the DataDir folder, the ControlPort to be used.
The main script is where all the magic happens, in fact, menu script
just build the variables with a graphical interface by the user
checklisting or writing with a input box to be organized to call the
main script by non technical users.
.PP
The script tries its best to avoid inserting incorrect lines to torrc,
that would make tor fail.
Because of this, any incorrect command flagged show the error mesage to
understand what is the cause of the error and display the commands help
option, finally exit the script without modifying the torrc.
At least two arguments are required for every command, some could have
more than one required argument.
.SH OPTIONS
.SS VARIABLES
.TP
\f[B][VAR]\f[R]
Variable is required.
.TP
\f[B]<\f[BI]VAR\f[B]>\f[R]
Variable is optional.
.TP
\f[B]on\f[R]
Enable by adding configuration.
.TP
\f[B]off\f[R]
Disable by removing the configuration.
.TP
\f[B]list\f[R]
List enabled configuration.
.TP
\f[B]purge\f[R]
Remove permanently the data.
.TP
\f[B]all-services\f[R], \f[B]all-clients\f[R]
Include all available services or clients.
.TP
\f[B]SERV1,SERV2\&...\f[R], \f[B]CLIENT1,CLIENT2,\&...\f[R]
List enabled option.
e.g: ssh,xmpp,irc or alice,bob.
.TP
\f[B]ssh\f[R], \f[B]xmpp\f[R], \f[B]nextcloud\f[R]
Example of onion services directory names.
.SS ARGUMENTS
.TP
\f[B]setup torrc\f[R]
Restore the latest torrc backup and reload tor.
Every time onionservice-cli is ran, it creates a torrc.bak, with this
option, it will copy the backup file to the torrc named file.
File(s) modified: torrc.
.TP
\f[B]on tcp\f[R] [SERV] [VIRTPORT] <\f[I]TARGET\f[R]> <\f[I]VIRTPORT2\f[R]> <\f[I]TARGET2\f[R]>
Enable an onion service using TCP socket (addr:port) as target.
If the TARGET is only the port of it TARGET was not provided, will use
the same port as VIRTPORT and bind to 127.0.0.1.
TARGET examples: 127.0.0.1:80, 192.168.1.100:80, 140.82.121.3.
File(s) modified: torrc.
.RS
.IP
.nf
\f[C]
onionservice-cli on tcp ssh 22
onionservice-cli on tcp ssh 22 22
onionservice-cli on tcp ssh 22 127.0.0.1:22
onionservice-cli on tcp ssh 22 127.0.0.1:22 80
onionservice-cli on tcp ssh 22 127.0.0.1:22 80 127.0.0.1:80
\f[R]
.fi
.RE
.TP
\f[B]on unix\f[R] [SERV] [VIRTPORT] <\f[I]VIRTPORT2\f[R]>
Enable an onion service using UNIX socket (unix:path) as target.
The TARGET is handled automatically by the script.
This method avoids leaking the onion service address to the local
network.
File(s) modified: torrc.
.RS
.IP
.nf
\f[C]
onionservice-cli on unix ssh 22
onionservice-cli on tcp ssh 22 80
\f[R]
.fi
.RE
.TP
\f[B]off\f[R] [SERV1,SERV2,\&...] <\f[I]purge\f[R]>
Disable an onion service by removing it configuration lines
(HiddenService) from the torrc.
Optionally purge its data directory, which will delete permanently the
onion service folder (HiddenServiceDir).
File(s) modified: torrc and optionally HiddenServiceDir.
.RS
.IP
.nf
\f[C]
onionservice-cli off ssh
onionservice-cli off ssh,xmpp
onionservice-cli off ssh,xmpp purge
\f[R]
.fi
.RE
.TP
\f[B]list\f[R] [all-services|SERV1,SERV2,\&...] <\f[I]no-qr\f[R]>
List onion service information: hostname (address) and in QR encoded
format, clients names and quantity, status if service is active or
inactive regarding the torrc lines (un)present and the HiddenServiceDir
presence, the torrc block.
File(s) modified: none.
.RS
.IP
.nf
\f[C]
onionservice-cli list ssh
onionservice-cli list ssh,xmpp
onionservice-cli list all-services
onionservice-cli list all-services no-qr
\f[R]
.fi
.RE
.TP
\f[B]renew\f[R] [all-services|SERV1,SERV2,\&...]
Renew onion service hostname (.onion domain) and clients (inside
HiddenServiceDir/authorized_clients/).
The onion service keys (hs_ed25519_public_key and
hs_ed25519_private_key) will be removed to override the hostname file.
The authorized clients will have its public keys changed for operational
security, meaning that all previously authorized clients will not be
able to authenticate anymore unless you send to them the new private
key.
File(s) modified: HiddenServiceDir.
.RS
.IP
.nf
\f[C]
onionservice-cli renew ssh
onionservice-cli renew ssh,xmpp
onionservice-cli renew all-services
\f[R]
.fi
.RE
.TP
\f[B]auth server on\f[R] [SERV] [CLIENT] <\f[I]CLIENT_PUB_KEY\f[R]>
Authorize to your service a client.
If the client public key is not provided, a new key pair of public and
private keys will be generated, keys are sent to stdout and you should
send to the client.
A $CLIENT.auth file will be created on
HiddenServiceDir/authorized_clients folder.
File(s) modified: HiddenServiceDir/authorized_clients/
.RS
.IP
.nf
\f[C]
onionservice-cli auth server on ssh alice
onionservice-cli auth server on ssh alice ABVCL52QL6IRYIOLEAYUVTZY3AIOMDI3AIFBAALZ7HJOHIJFVBIQ
\f[R]
.fi
.RE
.TP
\f[B]auth server on\f[R] [all-services|SERV1,SERV2,\&...] [CLIENT1,CLIENT2,\&...]
Authorize to your service a client.
A key pair of public and private keys will be generated, keys are sent
to stdout and you should send to the client.
A $CLIENT.auth file will be created on
HiddenServiceDir/authorized_clients folder.
File(s) modified: HiddenServiceDir/authorized_clients/
.RS
.IP
.nf
\f[C]
onionservice-cli auth server on ssh alice
onionservice-cli auth server on ssh alice,bob
onionservice-cli auth server on ssh,xmpp alice
onionservice-cli auth server on ssh,xmpp alice,bob
onionservice-cli auth server on all-services alice,bob
onionservice-cli auth server on all-services all-clients
\f[R]
.fi
.RE
.TP
\f[B]auth server off\f[R] [all-services|SERV1,SERV2,\&...] [all-clients|CLIENT1,CLIENT2,\&...]
Deauthorize from your service a client that is inside
HiddenServiceDir/authorized_clients folder.
File(s) modified: HiddenServiceDir/authorized_clients/
.RS
.IP
.nf
\f[C]
onionservice-cli auth server off ssh alice
onionservice-cli auth server off ssh alice,bob
onionservice-cli auth server off ssh,xmpp alice
onionservice-cli auth server off ssh,xmpp alice,bob
onionservice-cli auth server off all-services alice,bob
onionservice-cli auth server off all-services all-clients
\f[R]
.fi
.RE
.TP
\f[B]auth server list\f[R] [all-services|SERV1,SERV2,\&...]
List authorized clients and the respective public keys that are inside
HiddenServiceDir/authorized_clients folder.
File(s) modified: none
.RS
.IP
.nf
\f[C]
onionservice-cli auth server list ssh
onionservice-cli auth server list ssh,xmpp
onionservice-cli auth server list all-services
\f[R]
.fi
.RE
.TP
\f[B]auth client on\f[R] [ONION] <\f[I]CLIENT_PRIV_KEY\f[R]>
Authenticate as a client to a remote onion serivce.
If the client private keys is not provided, a new key pair of public and
private keys will be generated, keys are sent to stdout and you should
send to the onion service operator.
Add a $ONION.auth_private to ClientOnionAuthDir.
File(s) modified: ClientOnionAuthDir.
.RS
.IP
.nf
\f[C]
onionservice-cli auth client on fe4avn4qtxht5wighyii62n2nw72spfabzv6dyqilokzltet4b2r4wqd.onion
onionservice-cli auth client on fe4avn4qtxht5wighyii62n2nw72spfabzv6dyqilokzltet4b2r4wqd.onion UBVCL52FL6IRYIOLEAYUVTZY3AIOMDI3AIFBAALZ7HJOHIJFVBIQ
\f[R]
.fi
.RE
.TP
\f[B]auth client off\f[R] [ONION1,ONION2,\&...]
Deauthenticate from a remote onion serivce.
Remove the $ONION.auth_private file from ClientOnionAuthDir.
File(s) modified: ClientOnionAuthDir/.
.RS
.IP
.nf
\f[C]
onionservice-cli auth client off fe4avn4qtxht5wighyii62n2nw72spfabzv6dyqilokzltet4b2r4wqd.onion
onionservice-cli auth client off fe4avn4qtxht5wighyii62n2nw72spfabzv6dyqilokzltet4b2r4wqd.onion,yyyzxhjk6psc6ul5jnfwloamhtyh7si74b47a3k2q3pskwwxrzhsxmad.onion
\f[R]
.fi
.RE
.TP
\f[B]auth client list\f[R]
List authentication files and the respective private keys from
ClientOnionAuthDir.Useful when removing files and you want to see which
onions you are already authenticated with.
File(s) modified: none.
.RS
.IP
.nf
\f[C]
onionservice-cli auth client list
\f[R]
.fi
.RE
.TP
\f[B]web on\f[R] [SERV] [FOLDER]
Enable a website using a specific onion service by creating a
configuration file inside the web server folder.
The folder name is to be considered the wanted folder inside
WEBSITE_FOLDER variable defined on .onionrc.
File(s) modified: /etc/WEBSERVER/sites-enabled/.
.RS
.IP
.nf
\f[C]
onionservice-cli web on nextcloud nextcloud-local-site
\f[R]
.fi
.RE
.TP
\f[B]web off\f[R] [SERV]
Disable a website from a specific onion service by removing its
configuration file from the webserver folder.
File(s) modified: /etc/WEBSERVER/sites-enabled/.
.RS
.IP
.nf
\f[C]
onionservice-cli web off nextcloud
\f[R]
.fi
.RE
.TP
\f[B]web list\f[R]
List enabled websites, meaning the confiuration files inside the
webserver folder /etc/WEBSERVER/sites-enabled/.
File(s) modified: none.
.RS
.IP
.nf
\f[C]
onionservice-cli web list
\f[R]
.fi
.RE
.TP
\f[B]location\f[R] [SERV] [nginx|apache|html]
Guide to add onion location to your plainnet website when using the
webserver Nginx or Apache2 or an HTML header.
It does not modify any configuration by itself, the instructions to do
so are send to stdout.
File(s) modified: none.
.RS
.IP
.nf
\f[C]
onionservice-cli location nextcloud nginx
onionservice-cli location nextcloud apache
onionservice-cli location nextcloud html
\f[R]
.fi
.RE
.TP
\f[B]backup\f[R] [create|integrate]
Backup all of the torrc, DataDir/services and ClientOnionAuthDir either
by creating a backup file or integrating to the system from a backup
made before.
File(s) modified: torrc, DataDir/services, ClientOnionAuthDir.
.RS
.IP
.nf
\f[C]
onionservice-cli backup create
onionservice-cli backup integrate
\f[R]
.fi
.RE
.TP
\f[B]vanguards\f[R] [install|logs|upgrade|remove]
Manage Vanguards addon using the repository
https://github.com/mikeperry-tor/vanguards.
This addon protects against guard discovery and related traffic analysis
attacks.
A guard discovery attack enables an adversary to determine the guard
node(s) that are in use by a Tor client and/or Tor onion service.
Once the guard node is known, traffic analysis attacks that can
deanonymize an onion service (or onion service user) become easier.
Installation (git clone) and Upgrade (git pull) are bound to a commit
hash set on the .onionrc (git reset \[en]hard VANGUARDS_COMMIT_HASH).
Remove will delete the vanguards directory.
Logs follow the service logs.
When installing, it create a service called vanguards\[at]default, which
you can stop and start.
File(s) modified: DataDir/vanguards/vanguards.conf.
.RS
.IP
.nf
\f[C]
onionservice-cli vanguards install
onionservice-cli vanguards logs
onionservice-cli vanguards upgrade
onionservice-cli vanguards remove
\f[R]
.fi
.RE
.TP
<\f[I]-h|-help|\[en]help|help\f[R]>
Display the script help message.
Abscense of any parameter will also have the same effect.
.RS
.IP
.nf
\f[C]
onionservice-cli
onionservice-cli -h
onionservice-cli -help
onionservice-cli --help
onionservice-cli help
\f[R]
.fi
.RE
.SH EXIT VALUE
.TP
\f[B]0\f[R]
Success
.TP
\f[B]1\f[R]
Fail
.SH BUGS
.PP
Bugs you may find
.SH SEE ALSO
.IP
.nf
\f[C]
tor(1), sh(1), regex(7)
\f[R]
.fi
.SH COPYRIGHT
.PP
Copyright \[co] 2021 nyxnor.
License GPLv3+: GNU GPL version 3 or later
<https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH AUTHORS
Written by nyxnor (nyxnor\[at]protonmail.com).
