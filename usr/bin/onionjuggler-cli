#!/usr/bin/env sh

## This script lets you manage your hidden services to all its capability
##
## Lines that begin with "## " try to explain what's going on. Lines
## that begin with just "#" are disabled commands.

## script name
me="${0##*/}"

onionjuggler_defaults="/usr/share/onionjuggler/defaults.sh"
[ -e "${onionjuggler_defaults}" ] || { printf '%s\n' "library ${onionjuggler_defaults} does not exist"; exit 1; }
[ -f "${onionjuggler_defaults}" ] || { printf '%s\n' "library ${onionjuggler_defaults} is not a regular file"; exit 1; }
[ -r "${onionjuggler_defaults}" ] || { printf '%s\n' "library ${onionjuggler_defaults} can not be read"; exit 1; }
. "${onionjuggler_defaults}"
source_conf

usage(){
  printf %s"${magenta}
                           ';:  -'''
                      ':' -=l.:>l_
                     '^';z;_|J/':'
                    '|;l''?7xc:'
                    r1ztJtv;':'
                   'xxxtx|-'
               ':' '|ttxv:
               7Or:{tx|'
                O?':,Jom,
                vN'_'i9@;
               'g9'_'j2Qg-
             _xBt-':'>USMQv'
          ;uQDc.'';_:'lOjoOBNu:
       ~yQ6|.'''':;_:,';DSjjj6#QX;
     ?BQv''''''-=>'_'l'''8yjjjujqQQi
   :R#>'''''->|r-''_'.7'';gjjuujjjPQN:
  7@7'''''rl>-''''.;:'-1.'OPjuuuujjjM@l
 i@:''''*i'''''''.;_*''.u'lQjuuuuuujjK@r
~@1''''u,'''''',::'_-J,',1~@SjjuuuujjjQQ'
}@'''.a.'''':>;.'''_''/,'e.@Ejjuuuuuujh@>
Z@'''],'''.v^'''''';_''u'l:@Kjjuuuuuuja@v
}@.''a'''-o''''''->^;;'*l>/@OjjuuuuuujX@|
_@v'':i''L,'''''_{'_'y''kJu@6jjuuuujjjN@-
 v@:''7r'l;'''''x''_'o':Eqe@ojjuuuujjE@L
  F@c''|=.R'''''u''_'o:lSjQQjjjuujjuO@}
   ?Qq,'rcr8,'''e,'_'q-kZv@EjuujujoNQ|
    'iQO^,xlm7-''E'_~g;DO@OjjjujhBQ1'
       :jWkmycjl^:FxPXQ@@kjSEDQQe;
          -;vmdgN@@Q@@@QROsev^-
${nocolor}
Usage: ${me} [--option <ARGUMENT>]
\nComplete options:
  --on [--service <SERVICE>] [--socket <unix>] [--port <VIRTPORT,[VIRTPORT2]>]
                             enable a service listening with tcp sockets

  --on [--service <SERVICE>] [--port <VIRTPORT[:TARGET][,VIRTPORT2][:TARGET2]>]
                             enable a service listening on unix sockets

  --off [--purge] [--service <@all|SERV1,SERV2,...>
                             disable a service and optionally purge its dir

  --list [--quiet] [--service <@all|SERV1,SERV2,...>]
                             see credentials from indicated services

  --renew [--service <@all|SERV1,SERV2,...>]
                             renew indicated services addresses

  -h|--help                  display this help message

Options:
  -V, --version              print version
  --getconf                  print configuration
  --getopt                   print options given by the command line
  --on                       activate an onion service
    -s, --service <SERVICE>  service to activate
    -S, --socket <tcp|unix>  define a socket, default tcp
    -v, --hs-version 3       set service version, default 3
    -p, --port <VIRTPORT[:TARGET],VIRTPORT2[:TARGET2]>
                             define ports for the new onion service
    -g, --gateway            define target 127.0.0.1 (doesn't override target)
  --off                      deactivate an onion service configuration
    -s, --service <SERV1,SERV2,...>
                             service to deactivate
    -P, --purge              purge the onion service data
  --list                     list existing services data
    -s, --service <@all|SERV1,SERV2,...>
                             list all services or indicate them comma separated
    -q, --quiet              don't QR encode the hostname

Advanced:
  -R, --restart              signal tor to restart if needed
  -r, --reload               signal tor to reload (default option) if needed

Option names:
  status                     --on, --off, --list, --renew
  action                     --purge, --quiet
  signal                     --restart, --reload

Positional arguments:
  TARGET                     [addr:]port
  @all                       all services or clients available
  SERV1,SERV2...             specify services comma separated

If your services are unreacheable, restart tor.
Report bugs to: https://github.com/nyxnor/onionsjuggler/issues\n"

  exit 1
}

########################
#### OPTION PARSING ####

## Save all options
# shellcheck disable=SC2034
args_full="${*}"

## hacky getopts
## accepts long (--option) and short (-o) options
## accept argument assignment with space (--option arg | -o arg) or equal sign (--option=arg | -o=arg)
[ -z "${1}" ] && usage
while :; do
  [ -z "${1}" ] && break ## options ended
  shift_n=""
  opt_orig="${1}" ## save opt orig for error message to understand which opt failed
  # shellcheck disable=SC2034
  arg_possible="${2}" ## need to pass the second positional parameter because maybe it is an argument
  clean_opt "${1}" || break
  # shellcheck disable=SC2034
  case "${opt}" in
    getopt|getconf|V|version) set_arg dev "${opt}";;
    on|off|list|n|f|l|renew) set_arg status "${opt}";;
    R|restart|r|reload) set_arg signal "${opt}";;
    P|purge|q|quiet) set_arg action "${opt}";;
    s|service|s=*|service=*) get_arg service;;
    v|hs_version|v=*|hs_version=*) get_arg hs_version;;
    S|socket|S=*|socket=*) get_arg socket;;
    p|port|p=*|port=*) get_arg port;;
    g|gateway) set_arg gateway_service 1;;
    h|help) usage;;
    *) error_msg "Invalid option: '${opt_orig}'";;
  esac
  ## shift as many times as demanded
  ## if empty, shift at least once to pass to next option
  shift "${shift_n:-1}"
  [ -z "${1}" ] && break
done

###########################
########## MAIN ###########

## development options
## no file is changed
## useful to see if the command is correct before running it
case "${dev}" in
  getconf) get_conf_values; exit 0;;
  getopt) printf %s"${arg_saved}\n"; exit 0;;
  V|version) printf '%s\n' "${me} ${version}"; exit 0;;
esac

## main options
pre_run_check
case "${status}" in

  ## enable a service by configure its own torrc's block, consequentially the <HiddenServiceDir> will be created.
  ## tcp-socket uses addr:port, which can be remote or localhost. It leaks onion address to the local network
  ## unix-socket uses unix:path, which is create a unique name for it. It does not leak onion address to the local network.
  ## virtport is the port to be used by the client when visiting the service.
  ## empty socket will default to tcp
  ## empty hs_version will default to 3
  ## target is where the incoming traffic from virtport gets redirected. This option is abscent on unix-socket because the script completes it.
  ##  if target is not specified, will use the same port from virtport and bind to localhost.
  ##  if target only contains the port number and not the address, will bind to localhost.
  ## virtport2 and target 2 are optional
  n|on)
    check_opt_filled service
    check_name service
    # shellcheck disable=SC2086
    if grep -n -e "HiddenServiceDir ${tor_data_dir_services}/${service}$" -e "HiddenServiceDir ${tor_data_dir_services}/${service}/$" ${tor_config_files} | grep -v "[[:space:]]*\#"; then
      error_msg "service '${tor_data_dir_services}/${service}' already exists, choose another name"
    fi
    : "${hs_version:=3}"; [ "${hs_version}" != "3" ] && error_msg "hs-version ${hs_version} is not available" ## wait for v4 to change this
    : "${socket:=tcp}"
    check_opt_filled port

    ## backup torrc
    safe_edit tmp tor_conf
    notice "Including Hidden Service configuration to ${tor_conf_tmp}"
    printf %s"\nHiddenServiceDir ${tor_data_dir_services}/${service}\nHiddenServiceVersion ${hs_version}\n" | tee -a "${tor_conf_tmp}"

    finish_service_activation(){
      ## remove double empty lines
      cat_squeeze_blank "${tor_conf_tmp}" | tee "${tor_conf_tmp}".tmp >/dev/null && mv "${tor_conf_tmp}".tmp "${tor_conf_tmp}"
      signal_tor
      virtport="$(service_block print "${service}" "${tor_conf}" | grep "HiddenServicePort" | sed "s/HiddenServicePort //;s/ .*//" | tr "\n" "," | sed "s/\,$//;s/\,/\, /")"
      ## show the Hidden Service address
      test_service_exists "${service}"
      notice "Hidden Service information:"
      notice "Service name    = ${service}"
      notice "Service address = ${magenta}${onion_hostname}${nocolor}"
      notice "Virtual port    = ${virtport}"
      has qrencode && qrencode -m 2 -t ANSIUTF8 "${onion_hostname}"
    }

    case "${socket}" in

      tcp)
        ## tor-manual: By default, this option maps the virtual port to the same port on target_ip_default over TCP
        ## Because of that, this project lets the user leave target="" and write target as $target_ip_default:$virtport
        ## Also, substitutes localhost:port for $target_ip_default:$port to make exact match for target always, as localhost and target_ip_default mean the same thing
        ## This measures avoid using the same local port for different services
        ## Sanity check
        if [ "${operating_system}" = "anon-gateway" ]; then ## Gateway
          [ "${gateway_service}" = "1" ] && target_ip_default="127.0.0.1"
        elif [ "${operating_system}" = "anon-workstation" ]; then ## Workstation
          error_msg "Create onion services on the Gateway, not on the Workstation"
        fi
        : "${target_ip_default:="127.0.0.1"}" ## Common target

        ## get ports
        ## translate commas to spaces, truncate spaces, translate spaces to new lines,
        ##  and substitute the first semicolon to space.
        ## 80:127.0.0.1:80,443:127.0.0.1:443 becomes: 80 127.0.0.1:80\n443 127.0.0.1:443
        port="$(printf %s"${port}" | tr "," " " | tr -s " " | tr " " "\n" | sed "s|:| |")"

        fail_log="${onionjuggler_tmp_dir}/on-fail"
        printf '%s\n' "${port}" | while IFS="$(printf '\n')" read -r port_line; do
          IFS=" " read -r virtport target <<-EOF
            $(printf '%s\n' "${port_line}")
EOF
          ## virtport is necessary
          [ -z "${virtport}" ] && break
          ## target if empty, use tcp address on interface target_ip_default using the same port as virtport
          [ -z "${target}" ] && target="${target_ip_default}:${virtport}"
          target_addr="${target%%:*}"
          target_port="${target##*:}"

          ## the first check is in case target was provided as an integer, not as a target
          ## the second check is for uniformity, convert localhost to target_ip_default
          { [ "${target_addr}" = "${target_port}" ] || [ "${target_addr}" = "localhost" ]; } && target="${target_ip_default}:${target_port}"
          is_integer "${virtport}"
          is_addr_port "${target}"

          ## check if the target is being used by another service
          if grep -q \
            -e "^HiddenServicePort ${target_port}$" \
            -e "^HiddenServicePort .* ${target_port}$" \
            -e "^HiddenServicePort .* ${target_addr}$" \
            -e "^HiddenServicePort .* ${target}$" \
            "${tor_dump_config_hs}"
          then
            printf %s"HiddenServicePort ${virtport} ${target}\n"
            echo "1" | tee -a "${fail_log}" >/dev/null
            error_msg "Target '${target}' is already in use. Choose another port or disable the service that is using the same target."
          fi

          ## check if the target is being used multiple times by the new configuration
          if grep -q \
            -e "^HiddenServicePort ${target_port}$" \
            -e "^HiddenServicePort .* ${target_port}$" \
            -e "^HiddenServicePort .* ${target_addr}$" \
            -e "^HiddenServicePort .* ${target}$" \
            "${tor_conf_tmp}"
          then
            printf %s"HiddenServicePort ${virtport} ${target}\n"
            echo "1" | tee -a "${fail_log}" >/dev/null
            error_msg "Target '${target}' was specified multiple times, but it can only happen once."
          fi

          printf %s"HiddenServicePort ${virtport} ${target}\n" | tee -a "${tor_conf_tmp}"

          ## anon-gateway should have a different target for services aiming to the Workstation
          if [ "${operating_system}" = "anon-gateway" ] && [ "${target_addr}" = "127.0.0.1" ] && [ "${gateway_service}" != "1" ]; then
            echo "1" | tee -a "${fail_log}" >/dev/null
            error_msg "Target was set to 127.0.0.1 but option '--gateway' was not specified, otherwise set the Workstation IP address"
          fi

        done
        printf '\n' | tee -a "${tor_conf_tmp}"
        test -s "${fail_log}" && { rm -f -- "${fail_log}"; exit 1; }

        ## get info
        finish_service_activation
      ;;

      unix)
        port="$(printf %s"${port}" | tr "," " " | tr -s " " | tr " " "\n")"
        ## /var/run/ because it exists on Debian and OpenBSD, so respecting standards
        unix_path="unix:/var/run/${service}"

        fail_log="${onionjuggler_tmp_dir}/on-fail"
        printf '%s\n' "${port}" | while IFS="$(printf '\n')" read -r port_line; do
          IFS=" " read -r virtport <<-EOF
            $(printf '%s\n' "${port_line}")
EOF
          [ -z "${virtport}" ] && break
          ## use a key="-onion" on the target to facilitate discovering it later and distinction if there is a plain net site
          target="${unix_path}-${virtport}-onion.sock"
          is_integer "${virtport}"
          ## check wheter target is already in use on the tor configuration file
          if grep -q "^HiddenServicePort .* ${target}$" "${tor_dump_config_hs}"; then
            printf %s"HiddenServicePort ${virtport} ${target}\n"
            echo "1" | tee -a "${fail_log}" >/dev/null
            error_msg "Target '${target}' is already in use. Choose another port or disable the service that is using the wanted port."
          fi
          ## check wheter target is already in use on the temporary copy of the tor configuration file
          if grep -q "^HiddenServicePort .* ${target}$" "${tor_conf_tmp}"; then
            printf %s"HiddenServicePort ${virtport} ${target}\n"
            echo "1" | tee -a "${fail_log}" >/dev/null
            error_msg "Target '${target}' was specified multiple times, but it can only happen once."
          fi
          printf %s"HiddenServicePort ${virtport} ${target}\n" | tee -a "${tor_conf_tmp}"
        done
        printf '\n' | tee -a "${tor_conf_tmp}"
        test -s "${fail_log}" && { rm -f -- "${fail_log}"; exit 1; }

        ## get info
        finish_service_activation
      ;;

      *)
        error_msg "Invalid argument: socket=${socket}"
    esac
  ;;


  ## disable a service by removing service torrc's block.
  ## it is raw, services variables should be separated by an empty line per service, else you might get other non-related configuration deleted.
  ## purge is optional, it deletes the <HiddenServiceDir>
  ## will not check if folder or configuration exist, this is cleanup mode
  ## will not use '@all'. Purge is dangerous, purging all service is even more dangerous. Always backup.
  f|off)
    delete_service(){
      service="${1}"
      printf "\n"
      ## remove service service data
      case "${action:-}" in
        purge|P)
          if test -d "${tor_data_dir_services}/${service}"; then
            notice "${red}Deleting HiddenServiceDir ${underline}${tor_data_dir_services}/${service}${nocolor}"
            rm -rfv "${tor_data_dir_services:?}/${service:?}"
          else
            notice "${tor_data_dir_services}/${service} doesn't exist"
          fi
        ;;
        *)
          if test -d "${tor_data_dir_services}/${service}"; then
            notice "${yellow}Keeping HiddenServiceDir ${underline}${tor_data_dir_services}/${service}${nocolor}"
          else
            notice "${tor_data_dir_services}/${service} doesn't exist"
          fi
        ;;
      esac
      ## remove service paragraph in torrc
      notice "Deleting HiddenService configuration in ${underline}${tor_conf_tmp}${nounderline}"
      service_block delete "${service}" "${tor_conf_tmp}"
      ## substitute multiple sequential empty lines to a single one per sequence
      cat_squeeze_blank "${tor_conf_tmp}" | tee "${tor_conf_tmp}".tmp >/dev/null && mv "${tor_conf_tmp}".tmp "${tor_conf_tmp}"
      notice "Disabled service: ${bold}${service}${magenta}${nocolor}"
    }

    check_opt_filled service
    safe_edit tmp tor_conf
    loop_list delete_service "${service}"
    printf "\n"
    signal_tor
    notice "${green}Done!${nocolor}"
  ;;


  ## show all the necessary information to access the service such as the hostname and the QR encoded hostname to scan for Tor Browser Mobile
  ## show the clients names and quantity, as well as the service torrc's block
  ## @all will read through all services folders and execute the commands
  l|list)

    get_service_info(){
      #service="${1}"
      service_clean="${1%*/}"
      service_base="${service_clean##*/}"
      service_path="${service_clean%/*}"
      if [ "${service_path}" = "${service}" ]; then
        service_path="${tor_data_dir_services}"
      fi

      test_service_exists "${service_clean}"
      j=$((j+1))
      [ ${j} -eq 1 ] && printf '\n'
      ## save clients names that are inside <HiddenServiceDir>/authorized_clients/
      create_client_list "${service_clean}"
      if [ "${action}" != "q" ] && [ "${action}" != "quiet" ]; then
        has qrencode && qrencode -m 2 -t ANSIUTF8 "${onion_hostname}"
      fi

      # shellcheck disable=SC2086
      service_configuration_found="$(grep -l -e "HiddenServiceDir ${service_path}/${service_base}$" -e "HiddenServiceDir ${service_path}/${service_base}/$" ${tor_config_files} | grep -v -F "#")"

      notice "${bold}Host:${nocolor} ${magenta}${onion_hostname}${nocolor}"
      notice "${bold}Directory:${nocolor} ${service}"
      notice "${bold}Conf:${nocolor} ${service_configuration_found:="NONE"}"

      [ -n "${client_name_list}" ] && notice "${bold}Clients:${nocolor} ${client_name_list} (${client_count})"

      if [ "${service_configuration_found}" = "${tor_conf}" ]; then
        notice "${bold}Managed:${nocolor} ${green}True${nocolor}"
      else
        notice "${bold}Managed:${nocolor} ${yellow}False${nocolor}"
      fi

      if [ "${service_configuration_found}" = "NONE" ]; then
        notice "${bold}Status:${nocolor} ${yellow}Inactive${nocolor}"
      else
        notice "${bold}Status:${nocolor} ${green}Active${nocolor}" && service_block print "${service_clean}" "${tor_dump_config_hs}"
      fi

      printf '\n'
    }

    #is_service_dir_empty

    #for hs in $(grep "HiddenServiceDir" "${tor_dump_config_hs}" | sed "s/HiddenServiceDir//" | tr -s "\n" " "); do
    #  service_dir="${hs##* }"
    #  test -n "${service_dir}" && service_name_list="${service_name_list} ${service_dir}"
    #done

    j=0
    if [ -z "${service}" ] || [ "${service}" = "@all" ]; then
      service_dir_pattern="hs_ed25519_secret_key"
      service_name_list="$(find "${tor_data_dir}" -type f -name "${service_dir_pattern}" | sed "s|/${service_dir_pattern}||" | tr -s "\n" " ")"
      test -z "${service_name_list}" && error_msg "No services found in ${tor_data_dir}"
      service="${service_name_list}"
    fi
    loop_list get_service_info "${service}"
  ;;


  ## change service hostname by deleting its ed25519 pub and priv keys.
  ## <HiddenServiceDir>/authorized_clients/ because the would need to update their '.auth_private' file with the new onion address anyway and for security reasons.
  ## @all will read through all services folders and execute the commands.
  renew)
    check_opt_filled service
    [ "${service}" != "@all" ] && check_name service
    is_service_dir_empty

    renew_delete_old(){
      service="${1}"
      test_service_exists "${service}"
      eval "${service}"_hostname_old="${onion_hostname}"
      notice "\n${cyan}Renewing hostname of the service: ${bold}${service}${nocolor}"
      rm -fv "${tor_data_dir_services}/${service}"/hs_ed25519_secret_key
      rm -fv "${tor_data_dir_services}/${service}"/hs_ed25519_public_key
      rm -fv "${tor_data_dir_services}/${service}"/hostname
    }
    renew_get_new(){
      service="${1}"
      test_service_exists "${service}"
      create_client_list "${service}"
      eval "${service}"_hostname_new="${onion_hostname}"
      eval hostname_old='$'"${service}"_hostname_old
      eval hostname_new='$'"${service}"_hostname_new
      if [ "${hostname_old:-}" != "${hostname_new:-}" ]; then
        notice "${green}Onion hostname renewed for the service: ${bold}${service}${nocolor}\nOld = ${underline}${hostname_old}${nocolor}\nNew = ${underline}${hostname_new}${nocolor}\n"
        [ -n "${client_name_list}" ] && notice "${yellow}Info: Notify the clients ${client_name_list} to update their bookmarks to the hostname (including modifying the '.auth_private' file accordingly).\n"
        printf "\n"
      else
        error_msg "Failed to renew service: ${service}"
      fi
    }

    [ "${service}" = "@all" ] && { create_service_list; service="${service_name_list}"; }
    service_save="${service}"
    loop_list renew_delete_old "${service_save}"
    signal_tor
    sleep 0.5
    loop_list renew_get_new "${service_save}"
  ;;


  ## complain
  *) usage

esac
