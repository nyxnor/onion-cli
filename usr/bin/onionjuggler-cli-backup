#!/usr/bin/env sh

## script name
me="${0##*/}"

onionjuggler_defaults="/usr/share/onionjuggler/defaults.sh"
[ -e "${onionjuggler_defaults}" ] || { printf '%s\n' "${onionjuggler_defaults} does not exist"; exit 1; }
[ -f "${onionjuggler_defaults}" ] || { printf '%s\n' "${onionjuggler_defaults} is not a regular file"; exit 1; }
[ -r "${onionjuggler_defaults}" ] || { printf '%s\n' "${onionjuggler_defaults} can not be read"; exit 1; }
. "${onionjuggler_defaults}"
source_conf

usage(){
  printf %s"Usage: ${me} [--option <ARGUMENT>]
Complete options:
  -M, --make                make a backup
  -I, --integrate           integrate latest backup
"
  exit 2
}

########################
#### OPTION PARSING ####

## hacky getopts
## accepts long (--option) and short (-o) options
## accept argument assignment with space (--option arg | -o arg) or equal sign (--option=arg | -o=arg)
[ -z "${1}" ] && usage
while :; do
  shift_n=""
  opt_orig="${1}" ## save opt orig for error message to understand which opt failed
  # shellcheck disable=SC2034
  arg_possible="${2}" ## need to pass the second positional parameter because maybe it is an argument
  clean_opt "${1}" || break
  case "${opt}" in
    M|make|I|integrate) status="${opt}";;
    h|help) usage;;
    *) error_msg "Invalid option: '${opt_orig}'";;
  esac
  ## shift as many times as demanded
  ## if empty, shift at least once to pass to next option
  shift "${shift_n:-1}"
  [ -z "${1}" ] && break
done

########################
######### MAIN #########

[ "$(id -u)" -ne 0 ] && error_msg "run as root"
case "${status}" in

  ## full backup needede to restore all of your hidden services and client keys
  ## folders/files included: <torrc>, <DataDir>/services/, <DataDir>/onion_auth/
  M|make)
	tor_backup_file="tor-onion-services-backup-$(date +%Y-%m-%d-%H'h'-%M'm').tar.gz"
	notice "${cyan}Backing up the services dir, onion_auth dir and the torrc${nocolor}\n"
	mkdir -p "${tor_backup_dir}"
	## these lines are necessary to copy the full path when creating the compressed archive
	cp "${tor_conf}" "${tor_conf}".rest
	printf '\n%s\n\n' "$(grep "ClientOnionAuthDir" "${tor_conf}")" | tee "${tor_conf}".tmp >/dev/null
	for service in $(grep "HiddenServiceDir ${tor_data_dir_services}/" "${tor_conf}" | sed "s|HiddenServiceDir ${tor_data_dir_services}/||" | tr "\n" " "); do
	  printf "\n" | tee -a "${tor_conf}".tmp >/dev/null
	  service_block print "${service}" "${tor_conf}" | tee -a "${tor_conf}".tmp >/dev/null
	  printf "\n" | tee -a "${tor_conf}".tmp >/dev/null
	done
	mv "${tor_conf}".tmp "${tor_conf}"
	tar -cpzvf "${tor_backup_dir}"/"${tor_backup_file}" "${tor_data_dir_services}" "${tor_data_dir_auth}" "${tor_conf}" 2>/dev/null
	mv "${tor_conf}".rest "${tor_conf}"
	chown -R "${USER}:${USER}" "${tor_backup_dir}"
	set_owner_permission
	## try every way to find a program to compute a sha 256 message digest
	while :; do
	  has sha256sum && checksum_sha256="sha256sum" && break
	  has shasum && checksum_sha256="shasum -a 256" && break
	  has sha256 && checksum_sha256="sha256" && break
	  has openssl && checksum_sha256="openssl dgst -sha256 -r" && break
	  has digest && checksum_sha256="digest -a sha256" && break
	  break
	done
	## but if no program is available (unlikley), don't exec nothing
	[ -n "${checksum_sha256}" ] && notice "\nsha256=$(${checksum_sha256} "${tor_backup_dir}"/"${tor_backup_file}")"
  ;;

  ## restore backup
  ## backup tar file will be extracted and integrated into their respective tor folders
  I|integrate)
	## make a separate dir indie the backup dir to unpack files
	mkdir -p "${tor_backup_dir}"/integrate
	## get the latest backup
	tor_backup_file=$(find "${tor_backup_dir}" -type -f -name "*.tar.gz" | tail -n -1)
	notice "${cyan}Integrating backup from file: ${bold}${tor_backup_file}${nocolor}\n"
	notice "Extracting the archive\n"
	## extract to integrate directory
	tar -xpzvf "${tor_backup_dir}"/"${tor_backup_file}" -C "${tor_backup_dir}"/integrate
	chown -R "${USER}:${USER}" "${tor_backup_dir}"
	## place files into their correct directories
	cp -rf "${tor_backup_dir}"/integrate"${tor_data_dir_services}"/* "${tor_data_dir_services}"/
	cp -rf "${tor_backup_dir}"/integrate"${tor_data_dir_auth}"/* "${tor_data_dir_auth}"/
	## TODO: remove this?
	## this is necessary to avoid duplicated configuration lines,
	## but maybe it does not suffice because HS lines will still be repeated if present on the backup and on the current torrc
	client_auth_config="$(grep "ClientOnionAuthDir" "${tor_backup_dir}"/integrate"${tor_conf}")"
	if [ -n "${client_auth_config}" ]; then
	  sed -i'' "/ClientOnionAuthDir .*/d" "${tor_conf}"
	  printf '\n%s\n\n' "${client_auth_config}" "${tor_conf}"
	  sed -i'' "/ClientOnionAuthDir .*/d" "${tor_backup_dir}"/integrate"${tor_conf}"
	fi
	## TODO: should it merge or substitute?
	##  - merging ends up in possibly having repeated lines
	##  - substituing maybe ends up in losing configuration lines
	## merge the backup torrc with the current torrc
	cat_squeeze_blank "${tor_conf}" "${tor_backup_dir}"/integrate"${tor_conf}" | tee "${tor_conf}".tmp >/dev/null
	mv "${tor_conf}".tmp "${tor_conf}"
	rm -rf "${tor_backup_dir}"/integrate
	signal_tor
  ;;

  *) usage;;
esac
