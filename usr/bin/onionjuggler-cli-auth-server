#!/usr/bin/env sh

## manage client authorization server side (HiddenServiceDir/authorized_clients/)

onionjuggler_defaults="/usr/share/onionjuggler/defaults.sh"
[ -e "${onionjuggler_defaults}" ] || { printf '%s\n' "${onionjuggler_defaults} does not exist"; exit 1; }
[ -f "${onionjuggler_defaults}" ] || { printf '%s\n' "${onionjuggler_defaults} is not a regular file"; exit 1; }
[ -r "${onionjuggler_defaults}" ] || { printf '%s\n' "${onionjuggler_defaults} can not be read"; exit 1; }
. "${onionjuggler_defaults}"
source_conf

me="${0##*/}"
check_plugin_enabled "${me}" || error_msg "Plugin '${me}' is disabled in settings"

usage(){
  printf %s"Usage: ${me} [--option <ARGUMENT>]
Complete options:
  --on [--service <SERVICE>] [--client <CLIENT>] [--client-pub-key <CLIENT_PUB_KEY>]
                                    add client authorization, optionally add client's public key
  --off [--service <@all|SERV1,SERV2,...>] [--client <@all|CLIENT1,CLIENT2,...>]
                                    remove client authorization
  --list [--service <@all|SERV1,SERV2,...>]
                                    list authorized clients for indicated service
"
  exit 1
}


########################
#### OPTION PARSING ####

## hacky getopts
## accepts long (--option) and short (-o) options
## accept argument assignment with space (--option arg | -o arg) or equal sign (--option=arg | -o=arg)
[ -z "${1}" ] && usage
while :; do
  shift_n=""
  opt_orig="${1}" ## save opt orig for error message to understand which opt failed
  # shellcheck disable=SC2034
  arg_possible="${2}" ## need to pass the second positional parameter because maybe it is an argument
  clean_opt "${1}" || break
  case "${opt}" in
    on|off|list|n|f|l) status="${opt}";;
    s|service|s=*|service=*) get_arg service;;
    c|client|c=*|client=*) get_arg client;;
    client-pub-key|client-pub-key=*) get_arg client_pub_key;;
    h|help) usage;;
    *) error_msg "Invalid option: '${opt_orig}'";;
  esac
  ## shift as many times as demanded
  ## if empty, shift at least once to pass to next option
  shift "${shift_n:-1}"
  [ -z "${1}" ] && break
done

[ "$(id -u)" -ne 0 ] && error_msg "run as root"
[ -z "${service}" ] && usage
[ "${service}" != "@all" ] && check_service_name
is_service_dir_empty

case "${status}" in

  ## as the onion service operator, make your onion authenticated by generating a pair or public and private keys,
  ## the client pub key is automatically saved inside <HiddenServiceDir>/authorized_clients/alice.auth
  ## the client private key is shown in the screen and the key file deleted
  ## the onion service operator should send the private key for the desired client
  n|on)
    [ -z "${client}" ] && usage
    #printf "\n# Generating keys to access onion service (Client Authorization) ...\n"
    auth_server_add(){
      service="${1}"
      client="${2}"
      test_service_exists "${service}"
      ## Generate pem and derive pub and priv keys
      "${openssl_cmd}" genpkey -algorithm x25519 -out /tmp/k1.prv.pem
      grep -v " PRIVATE KEY" /tmp/k1.prv.pem | base64pem -d | tail -c 32 | base32 | sed "s/=//g" > /tmp/k1.prv.key
      "${openssl_cmd}" pkey -in /tmp/k1.prv.pem -pubout | grep -v " PUBLIC KEY" | base64pem -d | tail -c 32 | base32 | sed "s/=//g" > /tmp/k1.pub.key
      ## save variables
      client_pub_key=$(cat /tmp/k1.pub.key)
      client_priv_key=$(cat /tmp/k1.prv.key)
      client_priv_key_config="${onion_hostname%.onion}:descriptor:x25519:${client_priv_key}"
      client_pub_key_config="descriptor:x25519:${client_pub_key}"
      # Server side configuration
      printf %s"${client_pub_key_config}\n" | tee "${tor_data_dir_services}"/"${service}"/authorized_clients/"${client}".auth >/dev/null
      ## Client side configuration
      printf "<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n"
      printf %s"service=${bold}${service}${nocolor}\n"
      printf %s"client=${bold}${client}${nocolor}\n"
      printf %s"onion_hostname=${bold}${magenta}${onion_hostname}${nocolor}\n"
      printf %s"client_pub_key=${bold}${client_pub_key}${nocolor}\n"
      printf %s"client_pub_key_config=${bold}${client_pub_key_config}${nocolor}\n"
      printf %s"client_priv_key=${bold}${client_priv_key}${nocolor}\n"
      printf %s"client_priv_key_config=${bold}${client_priv_key_config}${nocolor}\n"
      printf "<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\n"
      ## Delete pem and keys
      rm -f /tmp/k1.pub.key /tmp/k1.prv.key /tmp/k1.prv.pem
    }
    [ "${service}" = "@all" ] && { create_service_list ; service="${service_name_list}" ; }
    [ "${client}" = "@all" ] && error_msg "Client name cannot be @all, it is a restricted wildcard for referring to all clients, not a name per se."
    if [ -n "${client_pub_key}" ]; then
      test_service_exists "${service}"
      client_pub_key_config="descriptor:x25519:${client_pub_key}"
      printf %s"${client_pub_key_config}" | tee "${tor_data_dir_services}"/"${service}"/authorized_clients/"${client}".auth >/dev/null
      notice "\nServer side authorization configured\n"
      printf %s" client_pub_key_config=${client_pub_key_config}\n"
      notice "\nAs you inserted the public key manually, we expect that the client already has the private key"
    else
      loop_list auth_server_add "${service}" "${client}"
    fi
    signal_tor
  ;;

  ## as the onion service operator, after making your onion service authenticated, you can also remove a specific client authorization
  ## if no clients are present, the service will be available to anyone that has the onion service address
  f|off)

    auth_server_remove_clients(){
      service="${1}"
      client="${2}"
      #notice "Service: ${service}"
      if [ "${client}" = "@all" ]; then
        rm -fv "${tor_data_dir_services}"/"${service}"/authorized_clients/*.auth
      else
        rm -fv "${tor_data_dir_services}"/"${service}"/authorized_clients/"${client}".auth
      fi
    }

    [ -z "${client}" ] && usage
    [ -z "${service}" ] && error_msg "service is missing"
    [ "${service}" != "@all" ] && check_service_name

    if [ "${service}" = "@all" ]; then
      notice "Removing client authorization for:"
      notice "Service: @all"
      create_service_list; service="${service_name_list}"
      if [ "${client}" = "@all" ]; then
        notice "Clients: @all.\nThe service is now accessible for anyone with the onion address.\n"
      else
        notice "If any client remains, the service will still be authenticated."
      fi
    else
      notice "Removing client authorization for:"
      notice "Service: ${service}"
      if [ "${client}" = "@all" ]; then
        notice "Clients: @all.\nThe service is now accessible for anyone with the onion address.\n"
      else
        notice "If any client remains, the service will still be authenticated."
      fi
    fi
    loop_list auth_server_remove_clients "${service}" "${client}"
    printf "\n"
    signal_tor
  ;;

  l|list)
    auth_server_list(){
      service="${1}"
      test_service_exists "${service}"
      create_client_list "${service}"
      notice "\nService: ${service}"
      if [ -n "${client_count}" ]; then
        [ -n "${client_name_list}" ] && printf %s"Clients: ${client_name_list} (${client_count})\n"
        for auth in "${tor_data_dir_services}/${service}/authorized_clients"/*; do
          auth="${auth##*/}"
          notice "${auth}: $(grep "descriptor:x25519:" "${tor_data_dir_services}"/"${service}"/authorized_clients/"${auth}")${nocolor}"
        done
      else
        notice "Clients: NONE (0)"
      fi
    }
    notice "${blue}Authorized clients for Hidden Services${nocolor}"
    [ "${service}" = "@all" ] && { create_service_list; service="${service_name_list}"; }
    loop_list auth_server_list "${service}"
  ;;

  *) usage
esac
