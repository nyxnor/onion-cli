#!/usr/bin/env sh

## DESCRIPTION
## This file lets you manage your hidden services to all its capability
##
## SYNTAX
## onionjuggler-cli command [REQUIRED] <OPTIONAL>
##
## Lines that begin with "## " try to explain what's going on. Lines
## that begin with just "#" are disabled commands.

usage(){
  # onion_ascii="images/onion-ascii-50-30.txt"
  # if [ -f "${onion_ascii}" ]; then
  #   onion_ascii="$(while IFS= read -r line || [ -n "$line" ]; do printf '%s\n' "$line"; done < "${onion_ascii}")"
  #   printf %s"${magenta} ${onion_ascii} ${nocolor}\n\n"
  # fi

  printf "Juggle with an Onion Service
\nUsage: %s${0##*/} command [required <args>] <optional>
\nComplete options:
  on [--service <SERVICE>] [--socket <tcp|unix>] [--port <VIRTPORT[,TARGET],VIRTPORT2[,TARGET2]>] <--version 3>
                                                             enable a service (only TCP requires a target)
  off [--service <@all|SERV1,SERV2,...>] <--purge>           disable a service and optionally purge its directory
  list [--service <@all|SERV1,SERV2,...>] <--no-qr>          see credentials from indicated services
  renew [--service <@all|SERV1,SERV2,...>]                   renew indicated services addresses
  auth-server --on [--service <SERVICE>] [--client <client>] --client-pub-key <CLIENT_PUB_KEY>
                                                             add client authorization, optionally add client's public key
  auth-server --on [--service <@all|SERV1,SERV2,...>] [--client <CLIENT1,CLIENT2,...>]
                                                             add client authorization
  auth-server --off [--service <@all|SERV1,SERV2,...>] [--client <@all|CLIENT1,CLIENT2,...>]
                                                             remove client authorization
  auth-server --list [--service <@all|SERV1,SERV2,...>]      list authorized clients for indicated service
  auth-client --on [--onion <ONION>] --client-priv-key <CLIENT_PRIV_KEY>
                                                             add authorization of client access, optionally add client's private key
  auth-client --off [--onion <ONION>]                        remove authorization of client access
  auth-client --list                                         list your keys as a client
  web --on [--service <SERVICE>] [--folder <SITE_PATH>]      start serving a website for certain service and its folder
  web --off [--service <SERVICE>]                            stop serving a website for certain service and its folder
  web --list                                                 list enabled websites
  location [--nginx|--apache2|--html] [--service <SERVICE>]   onion-location guide, no execution
  backup [--create|--integrate]                              restore latest torrc backup
  vanguards [--on|--list|--upgrade|--off]                    install, upgrade, remove or see logs for vanguards addon
  -h|--help                                                  display this help message

Options:
  -s, --service <SERVICE>                                    required option: on, off, list, renew, auth-server, auth-client, web
  on                                                         activate an onion service
    -S, --socket <tcp|unix>                                  define a socket for the new onion service
    -v, --version 3                                          define a version for the new onion service
    -p, --port <VIRTPORT[,TARGET],VIRTPORT2[,TARGET2]>       define ports for the new onion service
  off                                                        deactivate an onion service configuration
    -P, --purge                                              purge an onion service data
  list                                                       list existing services and their configuration, clients
    -q, --no-qr                                              don't QR encode the hostname
  auth-server                                                manage authorized_clients
    -n, --on                                                 authorized aclient
    -f, --off                                                remove authorization from a client
    -l, --list                                               list authorized clients
    -c, --client <CLIENT>                                    choose client
    -K, --client-pub-key <CLIENT_PUB_KEY>                    specify client pub key to authorize
  auth-client                                                manage your authorizations to an onion
    -n, --on                                                 add authorization
    -f, --off                                                remove authorization
    -l, --list                                               list current authorizations
    -o, --onion <ONION>                                      specify onion to authenticate
    -k, --client-priv-key <CLIENT_PRIV_KEY>                  specify your client private key
  web                                                        manage web server configuration
    -n, --on                                                 activate website to an onion service
    -f, --off                                                deactivate website to an onion service
    -l, --list                                               list active websites
    -F, --folder <SITE_PATH>                                 specify website files
  location                                                   guide to add onion-location to redirect users to your onion domain
    --nginx                                                  Nginx webserver header for onion-location
    --apache2                                                Apache2 webserver header for onion-location
    --html                                                   HTML header for onion-location
  backup                                                     complete backup of onion services
    -C, --create                                             create backup
    -I, --integrate                                          integrate backup to your system
  vanguards                                                  manage Vanguards protection
    -n, --on                                                 install Vanguards addon
    -l, --list                                               see Vanguards logs
    -u, --upgrade                                            upgrade configuration and repository
    -f, --off                                                remove Vanguards

Positional arguments:
  @all                                                       all services or clients available
  SERV1,SERV2...                                             specify services
  CLIENT1,CLIENT2,...                                        specify clients

'# Done': You should always see it at the end, else something unexpected occured.
It does not imply the code worked, you should always pay attention for errors in the logs.
If your services are unreacheable, restart tor.
\nReport bugs to: https://github.com/nyxnor/onionsjuggler/issues\n"

  exit 1
}


###################
#### VARIABLES ####

## display error message with instructions to use the script correctly.
error_msg(){ [ -n "${1}" ] && printf %s"\033[0;31mERROR: ${1}\033[0m\n"; exit 1; }

while true; do
  case "${1}" in
    on|off|list|renew|web|location|backup|restore|vanguards|restore-torrc) command="${1}"; shift;;

    auth-server|auth-client) command="${1%-*}"; host="${1#*-}"; : "${host:?$(error_msg "host is missing")}"; shift;;

    -i|--install|-L|--logs|-u|--upgrade|-r|--remove|--nginx|--apache2|--html|-q|--no-qr|-C|--create|-I|--integrate) action="${1#--}"; shift;;

    --on|--off|--list) status="${1#--}"; shift;;
    -n|-f|-l) status="${1#-}"; shift;;

    -s|--service) service="${2:?$(error_msg "service is missing")}"; shift 2;;
    --service=*) service="${1#*=}"; : "${service:?$(error_msg "service is missing")}"; shift;;

    -c|--client) client="${2:?$(error_msg "client is missing")}"; shift 2;;
    --client=*) client="${1#*=}"; : "${client:?$(error_msg "client is missing")}"; shift;;

    -o|--onion) onion="${2:?$(error_msg "onion is missing")}"; shift 2;;
    --onion=*) onion="${1#*-}"; : "${onion:?$(error_msg "onion is missing")}"; shift;;

    -P|--purge) purge="purge"; shift;;

    -v|--version) version="${2:?$(error_msg "version is missing")}"; shift 2;;
    --version=*) version="${1#*=}"; : "${version:?$(error_msg "version is missing")}"; shift;;

    -S|--socket) socket="${2:?$(error_msg "socket is missing")}"; shift 2;;
    --socket=*) socket="${1#*=}"; : "${socket:?$(error_msg "socket is missing")}"; shift;;

    -p| --port) port="${2:?$(error_msg "port is missing")}"; shift 2;;
    --port=*) port="${1#*=}"; : "${port:?$(error_msg "port is missing")}"; shift;;

    -F|--folder) folder="${2:?$(error_msg "folder is missing")}"; shift 2;;
    --folder=*) folder="${1#*=}"; : "${folder:?$(error_msg "folder is missing")}"; shift;;

    -k|--client-priv-key) client_priv_key="${2:?$(error_msg "client_priv_key is missing")}"; shift 2;;
    --client-priv-key=*) client_priv_key="${1#*=}"; : "${client_priv_key:?$(error_msg "client_priv_key is missing")}"; shift;;

    -K|--client-pub-key) client_pub_key="${2:?$(error_msg "client_pub_key is missing")}"; shift 2;;
    --client-pub-key=*) client_pub_key="${1#*=}"; : "${client_pub_key:?$(error_msg "client_pub_key is missing")}"; shift;;

    --) shift; break;;
    *) break;;
  esac
done

## check if user configuration is readable and if yes, source it
[ -r "${ONIONJUGGLER_CONF:="/etc/onionjuggler.conf"}" ] && . "${ONIONJUGGLER_CONF}"
## if any of the configurations are empty, use default ones

## system
: "${privilege_command:="sudo"}"
: "${tor_user:="debian-tor"}"
: "${tor_service:="tor@default.service"}"
: "${service_manager:="systemctl"}"
: "${etc_group_owner:="root"}"
: "${pkg_mngr_install:="apt install -y"}"
: "${dialog_box:="dialog"}"
: "${web_server:="nginx"}"
: "${requirements:="tor grep sed openssl basez git qrencode pandoc tar python3-stem ${dialog_box} ${web_server}"}"

## tor defaults
: "${data_dir:="/var/lib/tor"}"
: "${data_dir_services:="${data_dir}/services"}"
: "${data_dir_auth:="${data_dir}/onion_auth"}"
: "${torrc_root:="/etc/tor"}"
: "${torrc:="${torrc_root}/torrc"}"
: "${control_port:="9051"}" ## only the port, not the host

## torbrowser defaults -> TODO: expectation is to automate onion-auth inclusion, but would  have to be more usable than the browser gui version
: "${tor_browser_root:="${HOME}/.local/share/torbrowser/tbb/$(uname -m)/tor-tor_browser_${LANG%.*}"}"
: "${tor_browser_data_dir:="${tor_browser_root}/Browser/TorBrowser/Data/Tor"}"
: "${tor_browser_torrc:="${tor_browser_data_dir}/torrc"}"
: "${tor_browser_data_dir_auth:="${tor_browser_data_dir}/onion-auth"}"

## general
: "${website_dir:="/var/www"}"
: "${vanguards_commit:="10942de93f6578f8303f60014f34de2fca345545"}" ## https://github.com/mikeperry-tor/vanguards/commits/master
export DIALOGRC="${HOME}/.dialogrc-onionjuggler"

## backup
: "${scp_target_user:="remoteUser"}"
: "${scp_target_ip:="remoteIp"}"
: "${scp_target_path:="/home/${scp_target_user}/remote/path"}"
: "${scp_target_full:="${scp_target_user}@${scp_target_ip}:${scp_target_path}"}"
: "${hs_bk_dir:="${HOME}/tor-hs-backup"}"
: "${local_ip:=""}" ## There is no posix way of handling network interfaces

## colors
: "${bold:=0}"
nocolor="\033[0m"
#white="\033[${bold};97m"
#black="\033[${bold};30m"
red="\033[${bold};31m"
green="\033[${bold};32m"
#yellow="\033[${bold};33m"
blue="\033[${bold};34m"
#magenta="\033[${bold};35m"
#cyan="\033[${bold};36m"

## sanity check
{ [ "${privilege_command}" != "sudo" ] && [ "${privilege_command}" != "doas" ]; } && error_msg "privilege_command can be either 'sudo' or 'doas', not '${privilege_command}'"
{ [ "${web_server}" != "nginx" ] && [ "${web_server}" != "apache2" ]; } && error_msg "dialog_box can be either 'nginx' or 'apache2', not '${web_server}'"
printf %d "${control_port}" >/dev/null 2>&1 || error_msg "control_port must be an integer, not ${control_port}"

###################
#### FUNCTIONS ####

## set correct permissions for tor directories and files
set_owner_permission(){
  "${privilege_command}" chown -R "${tor_user}:${tor_user}" "${data_dir}"
  "${privilege_command}" chmod 700 "${data_dir}"

  "${privilege_command}" chown -R root:"${etc_group_owner}" "${torrc_root}"
  "${privilege_command}" chmod 755 "${torrc_root}"
  "${privilege_command}" chmod 644 "${torrc}"
}


# This function reload tor by default or forces to restart
# shellcheck disable=SC2120
restarting_tor(){
  set_owner_permission
  if [ -n "${1}" ]; then
    printf "\n# Restarting tor, please be patient.\n"
    printf "# Getting stuck after several minutes? Press Ctrl-C\n"
    printf "# and to restore the lastest torrc backup run:\n"
    printf "$ onionjuggler-cli restore-torrc\n"
    "${privilege_command}" ${service_manager} restart "${tor_service}"
    printf %s"${green}# Restarted tor succesfully!\n${nocolor}"
  else
    printf "\n# Reloading tor, please be patient.\n"
    printf "# Getting stuck after several minutes? Press Ctrl-C\n"
    printf "# and to restore the lastest torrc backup run:\n"
    printf "$ onionjuggler-cli restore-torrc\n"
    "${privilege_command}" ${service_manager} reload "${tor_service}"
    printf %s"${green}# Reloaded tor succesfully!\n${nocolor}"
  fi
}


## check if variable is integer
is_integer(){ printf %d "${1}" >/dev/null 2>&1 || error_msg "Not an integer: ${1}" ; }


## checks if the target is valid.
## Address range from 0.0.0.0 to 255.255.255.255. Port ranges from 0 to 65535
## this is not perfect but it is better than nothing
is_addr_port(){
  addr_port="${1}"
  port="${addr_port##*:}"
  addr="${addr_port%%:*}"
  addr_1="${addr%%.*}"
  addr_mid="${addr##*"${addr_1}".}"
  addr_2="${addr_mid%%.*}"
  addr_4="${addr_mid##*.}"
  addr_mid="${addr_mid##*"${addr_2}".}"
  addr_3="${addr_mid%%.*}"

  is_integer "${port}"; is_integer "${addr_1}"; is_integer "${addr_2}"; is_integer "${addr_3}"; is_integer "${addr_4}"

  { [ "${port}" -gt 0 ] && [ "${port}" -le 65535 ] ; } \
  || error_msg "port is not within range: 0 < port <= 65535: ${port}"

  { { [ "${addr_1}" -ge 0 ] && [ "${addr_1}" -le 255 ] ; } \
  && { [ "${addr_2}" -ge 0 ] && [ "${addr_2}" -le 255 ] ; } \
  && { [ "${addr_3}" -ge 0 ] && [ "${addr_3}" -le 255 ] ; } \
  && { [ "${addr_4}" -ge 0 ] && [ "${addr_4}" -le 255 ] ; } ; } \
  || error_msg "target address is not within range: 0.0.0.0 to 255.255.255.255: ${addr}"
}


is_service_dir_empty(){
  [ "$("${privilege_command}" -u "${tor_user}" ls "${data_dir_services}"/)" = "" ] && error_msg "Onion services directory is empty. Create a service first before running this command again."
}


## test if service exists to continue the script or output error logs.
## if the service exists, will save the hostname for when requested.
test_service_exists(){
  service="${1}"
  onion_hostname=$("${privilege_command}" -u "${tor_user}" grep -s ".onion" "${data_dir_services}"/"${service}"/hostname)
  [ -z "${onion_hostname}" ] && { printf %s"${red}ERROR: Service does not exist: ${service}\n${nocolor}"; exit 1; }
}


## save the clients names that are inside the <HiddenServiceDir>/authorized_clients/ in list format (CLIENT1,CLIENT2,...)
create_client_list(){
  service="${1}"
  client_name_list="$(printf %s"$("${privilege_command}" -u "${tor_user}" ls "${data_dir_services}"/"${service}"/authorized_clients/)" | sed "s/\.auth//g" | tr "\n" ",")"
  client_count=""
  # shellcheck disable=SC2086
  [ -n "${client_name_list}" ] && client_count="$(IFS=','; set -f -- ${client_name_list}; printf %s"${#}")"
}


## save the service names that have a <HiddenServiceDir> in list format (SERV1,SERV2,...)
create_service_list(){ service_name_list=$("${privilege_command}" -u "${tor_user}" ls "${data_dir_services}"/ | tr " " ","); }


## loops the parameters
## $1 must be the function to loop
## $2 normally is service, but can be any other parameter (accepts list -> SERV1,SERV2,...)
## $3 normally is client, but can be any other (accepts list -> client1,client2...)
loop_list(){
  for item in $(printf %s"${2}" | tr "," " "); do
    if [ -z "${3}" ]; then
      "${1}" "${item}"
    else
      for subitem in $(printf %s"${3}" | tr "," " "); do
        "${1}" "${item}" "${subitem}"
      done
    fi
  done
}


## TODO -> Implement this on the rest of the options
service_block(){
  process="${1}"
  service="${2}"
  file="${3:-${torrc}}"
  i=0
  grep -A 7 "HiddenServiceDir .*/${service}$" "${file}" | while IFS= read -r line; do
    i=$((i+1))
    ## break check
    [ ${i} -gt 1 ] && [ "${line%% *}" = "HiddenServiceDir" ] && break ## break on next HiddenService configuration
    [ -z "${line}" ] && break ## break on empty lines
    printf "%s${line}" | grep -q "^HiddenService" || break ## break on lines that don't begin with HiddenService
    ## if it passed the checks, just do
    case "${process}" in
      print) printf "%s${line}\n";;
      delete) "${privilege_command}" sed -i'' "s|${line}||" "${file}";;
    esac
  done
}

###########################
########## MAIN ###########
"${privilege_command}" sed -i'' 's/\/$//' "${torrc}" ## no config should end with '/' to find exact match.
service="$(printf %s"${service}" | tr "," " " | tr -s " ")"

case "${command}" in

  ## disabled the service wrongly and don't remember the ports? no worries, will restore the latest torrc.bak
  ## beaware this only works for the torrc, if you deleted your data directory with command "off" and "purge" option, the keys will not be restored, insteadm new ones will be created
  restore-torrc|RESTORE-TORRC)
    # create_service_list
    # for service in $(printf %s"${service_name_list}"); do
    #   block="$(service_block print "${service}" "${torrc}.bak")"
    #   printf '\n%s\n\n' "${block}" | "${privilege_command}" tee "${torrc}".tmp >/dev/null
    #   #printf '\n%s\n\n' "$("${privilege_command}" sed -n "/^HiddenServiceDir .*\/${service}$/p" "${torrc}".bak)" | "${privilege_command}" tee "${torrc}".tmp >/dev/null
    # done
    ## TODO -> this prints all the HiddenService lines and let them together, it 'works' but I like blocks for organization
    ## try to print blocks separated by empty lines
    printf '\n%s\n\n' "$("${privilege_command}" sed -n "/^HiddenService/p" "${torrc}".bak)" | "${privilege_command}" tee "${torrc}".tmp >/dev/null
    "${privilege_command}" sed "/^HiddenService/d" "${torrc}" | "${privilege_command}" tee "${torrc}".mod >/dev/null
    "${privilege_command}" sed '1s/^$//p;/./,/^$/!d' "${torrc}".mod "${torrc}".tmp | "${privilege_command}" tee "${torrc}" >/dev/null
    printf "# Restored torrc with its latest backup\n"
    restarting_tor
    printf %s"${green}\n# Done\n${nocolor}"
  ;;


  ## disable a service by removing service torrc's block.
  ## it is raw, services variables should be separated by an empty line per service, else you might get other non-related configuration deleted.
  ## purge is optional, it deletes the <HiddenServiceDir>
  ## will not check if folder or configuration exist, this is cleanup mode
  ## will not use '@all'. Purge is dangerous, purging all service is even more dangerous. Always backup.
  f|off|OFF)
    : "${service:?$(error_msg "service is missing")}"
    : "${purge}" ## optional
    delete_service(){
      service="${1}"
      purge="${2}"
      ## remove service service data
      if [ "${purge}" = "purge" ]; then
        printf %s"${red}\n# Deleting Hidden Service data in ${data_dir_services}/${service}\n${nocolor}"
        "${privilege_command}" rm -rfv "${data_dir_services}"/"${service}"
      else
        printf "\n# HiddenServiceDiretory was kept\n"
      fi
      "${privilege_command}" cp "${torrc}" "${torrc}".bak
      ## remove service paragraph in torrc
      printf %s"# Deleting Hidden Service configuration in ${torrc}\n"
      service_block delete "${service}"
      ## substitute multiple sequential empty lines to a single one per sequence
      "${privilege_command}" sed '1s/^$//p;/./,/^$/!d' "${torrc}" | "${privilege_command}" tee "${torrc}".tmp >/dev/null && "${privilege_command}" mv "${torrc}".tmp "${torrc}"
      printf %s"# Disabled service: ${service}\n\n"
    }
    loop_list delete_service "${service}" "${purge}"
    restarting_tor
    printf %s"${green}\n# Done\n${nocolor}"
  ;;


  ## enable a service by configure its own torrc's block, consequentially the <HiddenServiceDir> will be created.
  ## tcp-socket uses addr:port, which can be remote or localhost. It leaks onion address to the local network
  ## unix-socket uses unix:path, which is create a unique name for it. It does not leak onion address to the local network.
  ## virtport is the port to be used by the client when visiting the service.
  ## empty socket will default to unix
  ## empty version will default to 3
  ## empty port will default to 80
  ## target is where the incoming traffic from virtport gets redirected. This option is abscent on unix-socket because the script completes it.
  ##  if target is not specified, will use the same port from virtport and bind to localhost.
  ##  if target only contains the port number and not the address, will bind to localhost.
  ## virtport2 and target 2 are optional
  n|on|ON)
    : "${service:?$(error_msg "service is missing")}"
    : "${version:=3}"; [ "${version}" != "3" ] && error_msg "version=${version} is not available" ## wait for v4 to change this
    : "${socket:=unix}"
    : "${port:=80}"
    port="$(printf %s"${port}" | tr "," " " | tr -s " ")"
    virtport="${port%% *}"
    : "${virtport:?$(error_msg "virtport is missing")}"

    finish_service_activation(){
      ## remove double empty lines
      "${privilege_command}" sed '1s/^$//p;/./,/^$/!d' "${torrc}" | "${privilege_command}" tee "${torrc}".tmp >/dev/null && "${privilege_command}" mv "${torrc}".tmp "${torrc}"
      restarting_tor
      ## show the Hidden Service address
      test_service_exists "${service}"
      printf "\n# Hidden Service information:\n"
      qrencode -m 2 -t ANSIUTF8 "${onion_hostname}"
      printf %s"Service name    = ${service}\n"
      printf %s"Service address = ${onion_hostname}\n"
      printf %s"Virtual port    = ${virtport}\n"
      [ -n "${virtport2}" ] && printf %s"Virtual port 2  = ${virtport2}\n"
      printf %s"${green}\n# Done\n${nocolor}"
    }

    case "${socket}" in

      tcp|TCP)
        ## tor-manual: By default, this option maps the virtual port to the same port on 127.0.0.1 over TCP
        ## Because of that, this project lets the user leave target="" and write target as 127.0.0.1:$virtport
        ## Also, substitutes localhost:port for 127.0.0.1:$port
        ## This measures avoid using the same local port for different services
        ## grep torrc target to see if port is already in use and by which service, reading the file in reverse
        ## Sanity check
        port_mid="${port##*"${virtport}" }"
        target="${port_mid%% *}"
        port_mid="${port_mid##*"${target}" }"
        virtport2="${port_mid%% *}"
        target2="${port##* }"
        { [ "${virtport}" = "${virtport2}" ] || [ "${target}" = "${virtport2}" ]; } && virtport2=""
        [ "${target}" = "${target2}" ] && error_msg "target is the same as target2 -> ${target}=${target2}"
        : "${target:=127.0.0.1:"${virtport}"}"
        : "${target2:=127.0.0.1:"${virtport2}"}"
        ## Standard check for used ports
        target_addr="${target%%:*}"
        target_port="${target##*:}"
        { [ "${target_addr}" = "${target_port}" ] || [ "${target_addr}" = "localhost" ]; } && target="127.0.0.1:${target_port}"
        "${privilege_command}" grep -q "^HiddenServicePort .* ${target}$" "${torrc}" && error_msg "target=${target} is being used.\nINFO: Choose another port or disable the service that is using the wanted port."
        is_integer "${virtport}"; is_addr_port "${target}"
        ## Optional
        if [ -n "${virtport2}" ]; then
          ## Standard check for used ports
          target2_addr="${target2%%:*}"
          target2_port="${target2##*:}"
          { [ "${target2_addr}" = "${target2_port}" ] || [ "${target2_addr}" = "localhost" ]; } && target2="127.0.0.1:${target2_port}"
          "${privilege_command}" grep -q "^HiddenServicePort .* ${target2}$" "${torrc}" && error_msg "target2=${target2} is being used.\nINFO: Choose another port or disable the service that is using the wanted port."
          is_integer "${virtport2}"; is_addr_port "${target2}"
        fi
        "${privilege_command}" cp "${torrc}" "${torrc}".bak
        ## delete any old entry for that servive
        service_block delete "${service}"
        ## add configuration block, empty line after and before it
        printf %s"\n# Including Hidden Service configuration in ${torrc}\n"
        if [ -n "${virtport2}" ]; then
          printf %s"\nHiddenServiceDir ${data_dir_services}/${service}\nHiddenServiceVersion ${version}\nHiddenServicePort ${virtport} ${target}\nHiddenServicePort ${virtport2} ${target2}\n\n" | "${privilege_command}" tee -a "${torrc}"
        else
          printf %s"\nHiddenServiceDir ${data_dir_services}/${service}\nHiddenServiceVersion ${version}\nHiddenServicePort ${virtport} ${target}\n\n" | "${privilege_command}" tee -a "${torrc}"
        fi
        finish_service_activation
      ;;

      unix|UNIX)
        is_integer "${virtport}"
        virtport2="${port##* }"
        [ "${virtport}" = "${virtport2}" ] && virtport2=""
        [ -n "${virtport2}" ] && is_integer "${virtport2}" ## var not mandatory
        "${privilege_command}" cp "${torrc}" "${torrc}".bak
        ## delete any old entry for that servive
        service_block delete "${service}"
        ## add configuration block, empty line after and before it
        printf %s"\n# Including Hidden Service configuration in ${torrc}\n"
        unix_path="unix:/var/run/${service}-onion"
        if [ -n "${virtport2}" ]; then
          printf %s"\nHiddenServiceDir ${data_dir_services}/${service}\nHiddenServiceVersion ${version}\nHiddenServicePort ${virtport} ${unix_path}-${virtport}.sock\nHiddenServicePort ${virtport2} ${unix_path}-${virtport2}.sock\n\n" | "${privilege_command}" tee -a "${torrc}"
        else
          printf %s"\nHiddenServiceDir ${data_dir_services}/${service}\nHiddenServiceVersion ${version}\nHiddenServicePort ${virtport} ${unix_path}-${virtport}.sock\n\n" | "${privilege_command}" tee -a "${torrc}"
        fi
        finish_service_activation
      ;;

      *)
        error_msg "Invalid argument: socket=${socket}"
    esac
  ;;


  ## manage client authorization server side (HiddenServiceDir/authorized_clients/) or client side (ClientOnionAuthDir)
  auth|AUTH)
    : "${host:?$(error_msg "host is missing")}"
    : "${status:?$(error_msg "status is missing")}"
    case "${host}" in

      server|SERVER)
        is_service_dir_empty
        : "${service:?$(error_msg "service is missing")}"
        case "${status}" in

          ## as the onion service operator, make your onion authenticated by generating a pair or public and private keys,
          ## the client pub key is automatically saved inside <HiddenServiceDir>/authorized_clients/alice.auth
          ## the client private key is shown in the screen and the key file deleted
          ## the onion service operator should send the private key for the desired client
          n|on|ON)
            : "${client:?$(error_msg "client is missing")}"
            #printf "\n# Generating keys to access onion service (Client Authorization) ...\n"
            auth_server_add(){
              service="${1}"
              client="${2}"
              test_service_exists "${service}"
              ## Generate pem and derive pub and priv keys
              openssl genpkey -algorithm x25519 -out /tmp/k1.prv.pem
              grep -v " PRIVATE KEY" /tmp/k1.prv.pem | base64pem -d | tail --bytes=32 | base32 | sed "s/=//g" > /tmp/k1.prv.key
              openssl pkey -in /tmp/k1.prv.pem -pubout | grep -v " PUBLIC KEY" | base64pem -d | tail --bytes=32 | base32 | sed "s/=//g" > /tmp/k1.pub.key
              ## save variables
              client_pub_key=$(cat /tmp/k1.pub.key)
              client_priv_key=$(cat /tmp/k1.prv.key)
              onion_hostaname_without_onion="${onion_hostname%.onion}"
              client_priv_key_config="${onion_hostname%.onion}:descriptor:x25519:${client_priv_key}"
              client_pub_key_config="descriptor:x25519:${client_pub_key}"
              # Server side configuration
              printf %s"${client_pub_key_config}\n" | "${privilege_command}" tee "${data_dir_services}"/"${service}"/authorized_clients/"${client}".auth >/dev/null
              ## Client side configuration
              printf ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
              printf "# Declare the variables\n"
              printf %s"service=${service}\n"
              printf %s"client=${client}\n"
              printf %s"onion_hostname=${onion_hostname}\n"
              printf %s"client_pub_key=${client_pub_key}\n"
              printf %s"client_pub_key_config=${client_pub_key_config}\n"
              printf %s"client_priv_key=${client_priv_key}\n"
              printf %s"client_priv_key_config=${client_priv_key_config}\n"
              printf ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n"
              ## Delete pem and keys
              "${privilege_command}" rm -f /tmp/k1.pub.key /tmp/k1.prv.key /tmp/k1.prv.pem
            }
            instructions_auth(){
              printf ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
              printf "# Send these instructions to the client:\n"
              printf "\n"
              printf "# Check if <ClientOnionAuthDir> was configured in the <torrc>, if it was not, insert it: ClientOnionAuthDir /var/lib/tor/onion_auth\n"
              printf %s" [ \$(grep -c 'ClientOnionAuthDir' /etc/tor/torrc) -eq 0 ] && { printf 'ClientOnionAuthDir /var/lib/tor/onion_auth' | ${privilege_command} tee -a /etc/tor/torrc ; }\n"
              printf "\n"
              printf "# Create a file with the suffix '.auth_private' inside <ClientOnionAuthDir>\n"
              printf %s" printf '\${client_priv_key_config}' | ${privilege_command} tee /var/lib/tor/onion_auth/\${service}-\${onion_hostname}.auth_private\n"
              printf "\n"
              printf "# Reload tor\n"
              printf %s" ${privilege_command} chown -R debian-tor:debian-tor /var/lib/tor\n"
              printf %s" ${privilege_command} systemctl reload-or-restart tor\n"
              printf ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
            }
            [ "${service}" = "@all" ] && { create_service_list ; service="${service_name_list}" ; }
            [ "${client}" = "@all" ] && error_msg "Client name cannot be @all, it is a restricted wildcard for referring to all clients, not a name per se."
            if [ -n "${client_pub_key}" ]; then
              test_service_exists "${service}"
              client_pub_key_config="descriptor:x25519:${client_pub_key}"
              printf %s"${client_pub_key_config}" | "${privilege_command}" tee "${data_dir_services}"/"${service}"/authorized_clients/"${client}".auth >/dev/null
              printf "\n# Server side authorization configured\n\n"
              printf %s" client_pub_key_config=${client_pub_key_config}\n"
              printf "\n# As you inserted the public key manually, we expect that the client already has the private key\n"
            else
              loop_list auth_server_add "${service}" "${client}"
              instructions_auth
            fi
            restarting_tor
            printf %s"${green}\n# Done\n${nocolor}"
          ;;

          ## as the onion service operator, after making your onion service authenticated, you can also remove a specific client authorization
          ## if no clients are present, the service will be available to anyone that has the onion service address
          f|off|OFF)
            : "${client:?$(error_msg "client is missing")}"
            auth_server_remove_clients(){
              service="${1}"
              client="${2}"
              printf %s"Service  = ${service}\n"
              if [ "${client}" = "@all" ]; then
                printf "Client   = @all\n\n"
                "${privilege_command}" rm -fv "${data_dir_services}"/"${service}"/authorized_clients/*.auth
              else
                printf %s"Client   = ${client}\n\n"
                "${privilege_command}" rm -fv "${data_dir_services}"/"${service}"/authorized_clients/"${client}".auth
              fi
            }
            [ -z "${service}" ] && error_msg "service is missing"
            if [ "${service}" = "@all" ]; then
              printf "# Removing client authorization for all services.\n"
              create_service_list; service="${service_name_list}"
              [ "${client}" = "@all" ] \
              && printf "# Removing client authorization for all clients.\n# The service is now accessible for anyone with the onion address.\n\n" \
              || printf "# If any client remains, the service will still be authenticated.\n\n"
            else
              printf %s"# Removing client authorization for the services: ${service}\n"
              [ "${client}" = "@all" ] \
              && printf "# Removing client authorization for all clients.\n# The service is now accessible for anyone with the onion address.\n\n" \
              || printf "# If any client remains, the service will still be authenticated.\n\n"
            fi
            loop_list auth_server_remove_clients "${service}" "${client}"
            restarting_tor
            printf %s"${green}\n# Done\n${nocolor}"
          ;;

          l|list|LIST)
            auth_server_list(){
              service="${1}"
              test_service_exists "${service}"
              create_client_list "${service}"
              if [ -n "${client_count}" ]; then
                printf %s"\nService  = ${service}\n"
                [ -n "${client_name_list}" ] && printf %s"Clients  = ${client_name_list} (${client_count})\n"
                for AUTH in $("${privilege_command}" -u "${tor_user}" ls "${data_dir_services}/${service}/authorized_clients/"); do
                  printf %s"\n# File name: ${AUTH}\n"
                  printf %s"# Content:   $("${privilege_command}" -u "${tor_user}" grep "descriptor:x25519:" "${data_dir_services}"/"${service}"/authorized_clients/"${AUTH}")\n"
                done
                printf "\n"
              else
                printf %s"\n# No clients for Hidden Service: ${service}\n\n"
              fi
            }
            printf "# Authorized clients for Hidden Services\n"
            [ "${service}" = "@all" ] && { create_service_list; service="${service_name_list}"; }
            loop_list auth_server_list "${service}"
            printf %s"${green}\n# Done\n${nocolor}"
          ;;

          *)
            error_msg "Invalid argument: status=${status}"
        esac
      ;;


      client|CLIENT)
        case "${status}" in

          ## as the onion service client, add a key given by the onion service operator to authenticate yourself inside ClientOnionAuthDir
          ## The suffix '.auth_private' should not be mentioned, it will be automatically inserted when mentioning the name of the file.
          ## private key format must be: <onion-addr-without-.onion-part>:descriptor:x25519:<private-key>
          ## use the onion hostname as the file name, this avoid overriding the file by mistake and it indicates outside of the file for which service it refers to (of course it is written inside also)
          ## adding to Tor Browser automatically not supported yet
          n|on|ON)
            : "${onion:?$(error_msg "onion is missing")}"
            onion_hostaname_without_onion=${onion%.onion}
            suffix_onion=${onion##*.}
            [ "${onion_hostaname_without_onion%%*[^a-z2-7]*}" ] || error_msg "ONION_DOMAIN is invalid, it is not within base32 alphabet lower-case encoding [a-z][2-7]"
            [ "${#onion}" = "62" ] || error_msg "ONION_DOMAIN is invalid, LENGTH=${#onion} is different than 62 characters (<56-char-base32>.onion)"
            [ "${suffix_onion}" = "onion" ] || error_msg "ONION_DOMAIN is invalid, suffix is not '.onion'"
            "${privilege_command}" cp "${torrc}" "${torrc}".bak
            grep -q "ClientOnionAuthDir" "${torrc}" && { printf %s"\nClientOnionAuthDir ${data_dir_auth}\n\n" | "${privilege_command}" tee -a "${torrc}"; }
            "${privilege_command}" -u "${tor_user}" mkdir -p "${data_dir_auth}"
            if [ -z "${client_priv_key}" ]; then
              ## Generate pem and derive pub and priv keys
              openssl genpkey -algorithm x25519 -out /tmp/k1.prv.pem
              grep -v "PRIVATE KEY" /tmp/k1.prv.pem | base64pem -d | tail --bytes=32 | base32 | sed 's/=//g' > /tmp/k1.prv.key
              openssl pkey -in /tmp/k1.prv.pem -pubout | grep -v "PUBLIC KEY" | base64pem -d | tail --bytes=32 | base32 | sed 's/=//g' > /tmp/k1.pub.key
              ## save variables
              client_pub_key=$(cat /tmp/k1.pub.key)
              client_priv_key=$(cat /tmp/k1.prv.key)
              client_priv_key_config="${onion%.onion}:descriptor:x25519:${client_priv_key}"
              client_pub_key_config="descriptor:x25519:${client_pub_key}"
              ## Delete pem and keys
              "${privilege_command}" rm -f /tmp/k1.pub.key /tmp/k1.prv.key /tmp/k1.prv.pem
              # Client side configuration
              printf %s"${client_priv_key_config}\n" | "${privilege_command}" tee "${data_dir_auth}"/"${onion}".auth_private >/dev/null
              printf "# Client side authorization configured\n"
              printf "# This is your private key, keep it safe, keep it hidden:\n\n"
              printf %s" client_priv_key=${client_priv_key}\n"
              printf %s" client_priv_key_config=${client_priv_key_config}\n"
              printf "\n# Now it depends on the service operator to authorize you client public key\n\n"
              ## Server side configuration
              printf ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
              printf "# Send the public key and instructions to the onion service operator\n\n"
              printf %s" onion=${onion}\n"
              printf %s" client_pub_key=${client_pub_key}\n"
              printf %s" client_pub_key_config=descriptor:x25519:${client_pub_key}\n\n"
              printf "# Create a file with the client name (eg. alice) using the suffix '.auth' (eg. alice.auth) inside the folder\n"
              printf %s"#  '<HiddenServiceDir>/authorized_clients/' where the service hostname is ${onion}\n\n"
              printf %s" printf '${client_pub_key_config}' | ${privilege_command} tee /var/lib/tor/hidden_service/authorized_clients/alice.auth\n\n"
              printf "# Reload tor\n\n"
              printf %s" ${privilege_command} chown -R debian-tor:debian-tor /var/lib/tor\n"
              printf %s" ${privilege_command} systemctl reload-or-restart tor\n"
              printf ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
            else
              client_priv_key_config="${onion%.onion}:descriptor:x25519:${client_priv_key}"
              printf %s"${client_priv_key_config}\n" | "${privilege_command}" tee "${data_dir_auth}"/"${onion}".auth_private >/dev/null
              printf "\n# Client side authorization configured\n"
              printf %s"\n client_priv_key_config=${client_priv_key_config}\n"
              printf "\n# As you inserted the private key manually, we expect that you have already sent/received the public key to/from the onion service operator\n"
            fi
            printf %s"${green}\n# Done\n${nocolor}"
          ;;

          ## as the onion service client, delete '.auth_private' files from ClientOnionAuthDir that are not valid or has no use anymore
          f|off|OFF)
            : "${onion:?$(error_msg "onion is missing")}"
            auth_client_remove  (){
              onion="${1}"
              printf %s"\n# Removing ${data_dir_auth}/${onion}.auth_private"
              "${privilege_command}" rm -fv "${data_dir_auth}"/"${onion}".auth_private
            }
            if [ "$("${privilege_command}" -u "${tor_user}" ls "${data_dir_auth}")" != "" ]; then
              loop_list auth_client_remove "${onion}"
              printf "\n# Client side authorization removed\n"
              printf %s"${green}\n# Done\n${nocolor}"
            else
              printf %s"${red}INFO: ClientOnionAuthDir is empty\n${nocolor}"
            fi
          ;;

          l|list|LIST)
            if [ "$("${privilege_command}" -u "${tor_user}" ls "${data_dir_auth}")" != "" ]; then
              printf %s"# ClientOnionAuthDir ${data_dir_auth}\n"
              for AUTH in $("${privilege_command}" -u "${tor_user}" ls "${data_dir_auth}"); do
                printf %s"\n# File name: ${AUTH}\n"
                printf %s"# Content:   $("${privilege_command}" -u "${tor_user}" grep "descriptor:x25519:" "${data_dir_auth}"/"${AUTH}")"
              done
              printf "\n"
              printf %s"${green}\n# Done\n${nocolor}"
            else
              printf %s"${red}INFO: ClientOnionAuthDir is empty\n${nocolor}"
            fi
          ;;

          *)
            error_msg "Invalid argument: status=${status}"
        esac
      ;;

      *)
        error_msg "Invalid argument: host=${host}"
    esac
  ;;


  ## change service hostname by deleting its ed25519 pub and priv keys.
  ## <HiddenServiceDir>/authorized_clients/ because the would need to update their '.auth_private' file with the new onion address anyway and for security reasons.
  ## @all will read through all services folders and execute the commands.
  ## TODO -> Loop services, save hostname, reload tor once and show results.
  renew|RENEW)
    is_service_dir_empty
    : "${service:?$(error_msg "service is missing")}"
    renew_service_address(){
      service="${1}"
      test_service_exists "${service}"
      printf ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
      printf %s"\n# Renewing hostname (address) of the service: ${service}\n"
      old_hostname="${onion_hostname}"
      ## delete service public and secret keys
      "${privilege_command}" rm -fv "${data_dir_services}"/"${service}"/hs_ed25519_secret_key
      "${privilege_command}" rm -fv "${data_dir_services}"/"${service}"/hs_ed25519_public_key
      "${privilege_command}" rm -fv "${data_dir_services}"/"${service}"/hostname
      ## reload tor now so auth option can get the new hostname
      restarting_tor
      test_service_exists "${service}"
      new_hostname="${onion_hostname}"
      if [ "${old_hostname}" != "${new_hostname}" ]; then
        printf %s"${blue}# Service renewed.\n${nocolor}"
        printf %s"\nOld = ${old_hostname}\n"
        printf %s"New = ${onion_hostname}\n"
        printf "\n# Note: Remember to notify your clients about the new hostname and update their '.auth_private' files accordingly.\n"
      else
        printf %s"${red}# Failed to renew service: ${service}\n${nocolor}"
      fi
      printf ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
    }
    [ "${service}" = "@all" ] && { create_service_list; service="${service_name_list}"; }
    loop_list renew_service_address "${service}"
    printf %s"${green}\n# Done\n${nocolor}"
  ;;

  ## show all the necessary information to access the service such as the hostname and the QR encoded hostname to scan for Tor Browser Mobile
  ## show the clients names and quantity, as well as the service torrc's block
  ## @all will read through all services folders and execute the commands
  l|list|LIST)
    is_service_dir_empty
    : "${service:?$(error_msg "service is missing")}"
    get_service_info(){
      service="${1}"
      test_service_exists "${service}"
      ## save clients names that are inside <HiddenServiceDir>/authorized_clients/
      create_client_list "${service}"
      [ "${action}" = "no-qr" ] || { printf "\n"; qrencode -m 2 -t ANSIUTF8 "${onion_hostname}"; }
      printf %s"\nAddress  = ${onion_hostname}\n"
      printf %s"Service  = ${service}\n"
      [ -n "${client_name_list}" ] && printf %s"Clients  = ${client_name_list} (${client_count})\n"
      if "${privilege_command}" grep -q "^HiddenServiceDir .*/${service}$" "${torrc}"; then
        printf "Status   = active\n" && service_block print "${service}"
      else
        printf "Status   = inactive\n"
      fi
      printf "\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
    }
    [ "${service}" = "@all" ] && { create_service_list; service="${service_name_list}"; }
    loop_list get_service_info "${service}"
    printf %s"${green}\n# Done\n${nocolor}"
  ;;

  ## start serving files with a webserver for a specific onion service and specific website folder
  web|WEB)
    : "${web_server:?$(error_msg "web_server is missing")}"
    : "${status:?$(error_msg "status is missing")}"
    case "${status}" in

      n|on|ON)
        is_service_dir_empty
        : "${service:?$(error_msg "service is missing")}"
        : "${folder:?$(error_msg "folder is missing")}"
        test_service_exists "${service}"
        port=$(service_block print "${service}" | grep "HiddenServicePort" | tail -n 1)
        only_ports=${port#* }
        virtport=${only_ports% *}
        target=${only_ports##* }
        printf %s"# Activating web server for the onion service: ${service}\n\n"
        ## If starts with '~/' or '/', user specified the path, if started with anything else expect a folder inside ${website_dir}
        case "${folder}" in
          ~/*|/*)
            # shellcheck disable=SC2269
            folder="${folder}";;
          *)
            folder="${website_dir}/${folder}"
        esac


        case "${web_server}" in
          nginx)
            printf %s"
server {
    listen ${target} default_server;

    access_log /var/log/nginx/access_${service}.log;
    error_log /var/log/nginx/error_${service}.log;

    root ${folder};
    index index.html index.htm index.php;
}
" | sudo tee /tmp/"${service}"-onion.conf
          ;;
          apache)
            printf %s"
<VirtualHost *:${target}>
    ServerName
    DocumentRoot ${folder}
    ErrorLog /var/log/apache2/${service}.log
</VirtualHost>
" | sudo tee /tmp/"${service}"-onion.conf
          ;;
        esac

        "${privilege_command}" cp -v /tmp/"${service}"-onion.conf /etc/"${web_server}"/sites-available/
        "${privilege_command}" ln -sfv /etc/"${web_server}"/sites-available/"${service}"-onion.conf /etc/"${web_server}"/sites-enabled/
        printf "\n# Web server configuration:\n\n"
        #"${privilege_command}" cat /tmp/"${service}"-onion.conf
        #while IFS= read -r line || [ -n "$line" ]; do printf '%s\n' "$line"; done < "/tmp/${service}-onion.conf"
        printf "\n# Reloading web server to apply new configuration\n"
        case "${web_server}" in
          nginx) "${privilege_command}" nginx -t && "${privilege_command}" nginx -s reload;;
          apache2) "${privilege_command}" apache2 -t && "${privilege_command}" apache -k graceful;;
        esac
        #"${privilege_command}" rm -f /tmp/"${service}"-onion.conf
        printf %s"\n# Address: http://${onion_hostname}:${virtport}\n"
        printf %s"${green}\n# Done\n${nocolor}"
      ;;

      f|off|OFF)
        : "${service:?$(error_msg "service is missing")}"
        disable_site(){
          service="${1}"
          printf %s"\n# Stopping website of the service: ${service}\n"
          "${privilege_command}" rm -fv /etc/"${web_server}"/sites-available/"${service}"-onion.conf ## for cleanliness
          "${privilege_command}" rm -fv /etc/"${web_server}"/sites-enabled/"${service}"-onion.conf
        }
        loop_list disable_site "${service}" 0
        printf "\n# Reloading web server to apply new configuration\n"
        case "${web_server}" in
          nginx) "${privilege_command}" nginx -t && "${privilege_command}" nginx -s reload;;
          apache2) "${privilege_command}" apache2 -t && "${privilege_command}" apache2 -k graceful;;
        esac
        printf %s"${green}\n# Done\n${nocolor}"
      ;;

      l|list|LIST)
        printf %s"# Web server = ${web_server}\n\n"
        printf "# Enabled websites:"
        sites_enabled=$("${privilege_command}" ls /etc/"${web_server}"/sites-enabled/ | sed "s/-onion.conf//g")
        [ -n "${sites_enabled}" ] && printf %s"\n${sites_enabled}\n" || printf " No website enabled\n"
      ;;

      *)
        error_msg "Invalid argument: ${status}"
    esac
  ;;


  ## guide to add onion-location to redirect tor users when using your plainnet site to the onion service address
  ## https://matt.traudt.xyz/posts/website-setup/
  location|LOCATION)
    is_service_dir_empty
    : "${action:?$(usage)}"
    : "${service:?$(error_msg "service is missing")}"
    test_service_exists "${service}"

    start_location(){
    printf "# Onion-Location guided steps
\n* The below output is printing text, no file was modified by this script, therefore, user needs to manually configure.
* For web servers, include header line inside the plainnet ssl block (port 443).
* It assumes you know how to run a plainnet server, configuration is an example and should be adapted to your needs.
\n# Add to your \"%s${action}\" configuration:\n"
}

  finish_location(){
  printf "\n# Test redirection
\n* Open the web site in Tor Browser and a purple pill will appear in the address bar; or
* Fetch the web site HTTP headers and look for onion-location entry and the onion service address:
\n\twget --server-response --spider your-website.tld\n"
}

    case "${action}" in

      nginx|NGINX)
        start_location
        printf "
server {\n\tlisten 443 ssl http2;\n\tadd_header Onion-Location http://""%s${onion_hostname}""\$request_uri;\n}
\n# Reload web server:\n\n\t${privilege_command} nginx -t && ${privilege_command} nginx -s reload\n"
        finish_location
      ;;

      apache2|APACHE2)
        start_location
        printf "
<VirtualHost *:443>\n\tHeader set Onion-Location \"http://%s${onion_hostname}%%{REQUEST_URI}s\"\n</Virtualhost>
\n# Enable headers and rewrite modules:\n\n\t${privilege_command} a2enmod headers rewrite
\n# Reload web server:\n\n\t${privilege_command} apache2 -t && ${privilege_command} apache2 -k graceful\n"
        finish_location
      ;;

      html|HTML)
        start_location
        printf "
<meta http-equiv=\"onion-location\" content=\"http://%s${onion_hostname}\"/>
\n# Reload web server that you use:\n\n\t${privilege_command} nginx -t && ${privilege_command} nginx -s reload\n\t# or\n\t${privilege_command} apache2 -t && ${privilege_command} apache2 -k graceful\n"
        finish_location
      ;;

      *)
        error_msg "Invalid argument: ${action}"
    esac
  ;;


  backup|BACKUP)
    : "${action:?$(usage)}"
    case "${action}" in

      ## restore backup
      ## backup tar file will be extracted and integrated into their respective tor folders
      ## scp instructions to import backup from remote host
      -I|integrate|INTEGRATE)
        # shellcheck disable=SC2153,SC2154
        "${privilege_command}" -u "${USER}" mkdir -p "${hs_bk_dir}"/integrate
        hs_bk_tar=$("${privilege_command}" -u "${USER}" ls "${hs_bk_dir}" | grep ".tar.gz" | tail -n -1)
        printf %s"# Integrating backup from file: ${hs_bk_tar}\n\n"
        printf "# Extracting the archive\n\n"
        "${privilege_command}" tar -xpzvf "${hs_bk_dir}"/"${hs_bk_tar}" -C "${hs_bk_dir}"/integrate
        "${privilege_command}" chown -R "${USER}:${USER}" "${hs_bk_dir}"
        "${privilege_command}" cp -rf "${hs_bk_dir}"/integrate"${data_dir_services}"/* "${data_dir_services}"/
        "${privilege_command}" cp -rf "${hs_bk_dir}"/integrate"${data_dir_auth}"/* "${data_dir_auth}"/
        data_dir_auth_BK="$("${privilege_command}" grep "ClientOnionAuthDir" "${hs_bk_dir}"/integrate"${torrc}")"
        if [ -n "${data_dir_auth_BK}" ]; then
          "${privilege_command}" sed -i'' "/ClientOnionAuthDir .*/d" "${torrc}"
          printf '\n%s\n\n' "${data_dir_auth_BK}" | "${privilege_command}" tee -a "${torrc}" >/dev/null
          "${privilege_command}" sed -i'' "/ClientOnionAuthDir .*/d" "${hs_bk_dir}"/integrate"${torrc}"
        fi
        "${privilege_command}" sed '1s/^$//p;/./,/^$/!d' "${torrc}" "${hs_bk_dir}"/integrate"${torrc}" | "${privilege_command}" tee "${torrc}".tmp >/dev/null
        "${privilege_command}" mv "${torrc}".tmp "${torrc}"
        "${privilege_command}" rm -rf "${hs_bk_dir}"/integrate
        ## RESTORE BACKUP FROM REMOTE
        printf "\n# Restore your configuration importing from a remote machine.\n\n"
        ## upload from remote to this instane
        printf "# Import backup file uploading to remote. On the remote terminal, run:\n"
        printf %s"\t${privilege_command} scp -r ${hs_bk_tar} ${USER}@${local_ip}:${hs_bk_dir}/\n\n" #### remove hs_bk_tar
        ## download from this instance
        printf "# Import backup file downloading from remote. On this terminal instance, run:\n"
        printf %s"\t${privilege_command} scp -r ${scp_target_full} ${hs_bk_dir}/${hs_bk_tar}\n" #### remove hs_bk_tar
        #restarting_tor
      ;;

      ## full backup needede to restore all of your hidden services and client keys
      ## folders/files included: <torrc>, <DataDir>/services/, <DataDir>/onion_auth/
      ## scp instructions to export backup to remote host
      -C|create|CREATE)
        hs_bk_tar="tor-onion-services-backup-$(date +%Y-%m-%d-%H'h'-%M'm').tar.gz"
        printf "# Backing up the services dir, onion_auth dir and the torrc\n\n"
        mkdir -p "${hs_bk_dir}"
        ## these lines are necessary to copy the full path when creating the compressed archive
        "${privilege_command}" cp "${torrc}" "${torrc}".rest
        printf '\n%s\n\n' "$("${privilege_command}" grep "ClientOnionAuthDir" "${torrc}")" | "${privilege_command}" tee "${torrc}".tmp >/dev/null
        printf '\n%s\n\n' "$("${privilege_command}" sed -n "/HiddenService/{p}" "${torrc}")" | "${privilege_command}" tee -a "${torrc}".tmp >/dev/null
        "${privilege_command}" mv "${torrc}".tmp "${torrc}"
        "${privilege_command}" tar -cpzvf "${hs_bk_dir}"/"${hs_bk_tar}" "${data_dir_services}" "${data_dir_auth}" "${torrc}" 2>/dev/null
        "${privilege_command}" mv "${torrc}".rest "${torrc}"
        "${privilege_command}" chown -R "${USER}:${USER}" "${hs_bk_dir}"
        set_owner_permission
        if ! command -v sha256sum >/dev/null; then
          if ! command -v shasum >/dev/null; then
            if command -v sha256 >/dev/null; then
              sha256_command="sha256"
            fi
          else
            sha256_command="shasum -a 256"
          fi
        else
          sha256_command="sha256sum"
        fi
        [ -n "${sha256_command}" ] && printf %s"\nsha256=$(${sha256_command} "${hs_bk_dir}"/"${hs_bk_tar}")\n\n"
        ## upload to remote
        printf "# Export backup file uploading to remote. On this terminal instance, run:\n"
        printf %s"\t${privilege_command} scp -r ${hs_bk_dir}/${hs_bk_tar} ${scp_target_full}\n\n"
        ## download from this instance on remote
        printf "# Export backup file downloading from remote. On the remote terminal, run:\n"
        printf %s"\t${privilege_command} scp -r ${USER}@${local_ip}:${hs_bk_dir}/${hs_bk_tar} .\n"
      ;;

      *)
        error_msg "Invalid argument: ${action}"
    esac
  ;;


  ## This addon protects against guard discovery and related traffic analysis attacks.
  ## A guard discovery attack enables an adversary to determine the guard node(s) that are in use by a Tor client and/or Tor onion service.
  ## Once the guard node is known, traffic analysis attacks that can deanonymize an onion service (or onion service user) become easier.
  ##  TODO: hardening (as in $ sytemctl cat tor@default), but got permission denied: unable to read '/run/tor/control.authcookie'
  vanguards|VANGUARDS)
    : "${action:?$(usage)}"

    vanguards_config(){
      "${privilege_command}" cp "${torrc}" "${torrc}".bak
      ## Keep config with the torrc and torsocks.conf
      "${privilege_command}" cp -v "${data_dir}"/vanguards/vanguards-example.conf "${torrc_root}"/vanguards.conf
      "${privilege_command}" sed -i'' "s|control_port =.*|control_port = ${control_port}|g" "${torrc_root}"/vanguards.conf
      "${privilege_command}" sed -i'' "s|logfile = .*|logfile = /var/log/tor/vanguards.log|g" "${torrc_root}"/vanguards.conf
      ## Control and Authentication methods are needed. Use the easiest to configure if the manual ones are not present, else do nothing.
      ## Control methods are Port (default: 9051) and Socket (default: /run/tor/control). Prefer port because socket path may differ on different systems https://github.com/mikeperry-tor/vanguards/pull/54#issuecomment-812185302.
      if ! grep -q "ControlPort ${control_port}" "${torrc}" && ! grep -q "ControlSocket" "${torrc}"; then
        "${privilege_command}" sed -i'' "s/ControlPort .*/ControlPort ${control_port}/" "${torrc}"
        grep -q "ControlPort ${control_port}" "${torrc}" || printf %s"\nControlPort ${control_port}\n\n" | "${privilege_command}" tee -a "${torrc}" >/dev/null
      fi
      ## Authentication methods are Cookie (default: 0) and HashedPassword, to read the "control_auth_cookie". Prefer cookie because else a password is needed. If any method was already configured, use it.
      if ! grep -q "CookieAuthentication 1" "${torrc}" && ! grep -q "HashedControlPassword" "${torrc}"; then
        "${privilege_command}" sed -i'' "s/CookieAuthentication .*/CookieAuthentication 1/" "${torrc}"
        grep -q "CookieAuthentication" "${torrc}" || printf "\nCookieAuthentication 1\n\n" | "${privilege_command}" tee -a "${torrc}"  >/dev/null
      fi
      ## Generate Vanguards service
      printf %s"
[Unit]
Description=Additional protections for Tor onion services
Wants=${tor_service}
After=network.target nss-lookup.target

[Service]
WorkingDirectory=${data_dir}/vanguards
ExecStart=/usr/bin/python3 src/vanguards.py --config ${torrc_root}/vanguards.conf
User=${tor_user}
Group=${tor_user}
Type=simple
Restart=always

[Install]
WantedBy=multi-user.target
" | sudo tee /tmp/vanguards@default.service
      "${privilege_command}" cp /tmp/vanguards@default.service /etc/systemd/system/
      printf "\n>>>>>>>>>>>>>>>>>>>\n"
      while IFS= read -r line || [ -n "$line" ]; do printf '%s\n' "$line"; done < "/tmp/vanguards@default.service"
      #cat /tmp/vanguards@default.service
      printf ">>>>>>>>>>>>>>>>>>>\n\n"
      restarting_tor
      "${privilege_command}" systemctl daemon-reload
      "${privilege_command}" systemctl enable vanguards@default.service
      "${privilege_command}" systemctl restart vanguards@default.service
      "${privilege_command}" systemctl status vanguards@default.service --no-pager
      printf %s"${green}\n# Done\n${nocolor}"
    }

    case "${action}" in
      n|on|ON)
        printf "# Installing Vanguards...\n\n"
        "${privilege_command}" -u "${tor_user}" git clone https://github.com/mikeperry-tor/vanguards.git "${data_dir}/vanguards"
        "${privilege_command}" -u "${tor_user}" git -C "${data_dir}"/vanguards reset --hard "${vanguards_commit}"
        vanguards_config
      ;;

      -u|upgrade|UPGRADE)
        printf "# Upgrading Vanguards...\n\n"
        "${privilege_command}" -u "${tor_user}" git -C "${data_dir}"/vanguards pull -p --rebase=false
        "${privilege_command}" -u "${tor_user}" git -C "${data_dir}"/vanguards reset --hard "${vanguards_commit}"
        "${privilege_command}" -u "${tor_user}" git -C "${data_dir}"/vanguards show
        vanguards_config
      ;;

      f|off|OFF)
        printf "# Removing Vanguards...\n\n"
        "${privilege_command}" rm -rfv "${data_dir}"/vanguards
        printf %s"${green}\n# Done\n${nocolor}"
      ;;

      l|list|LIST)
        "${privilege_command}" tail -f -n 25 /var/log/tor/vanguards.log
      ;;

      *)
        error_msg "Invalid argument: ${action}"
    esac
  ;;

  *) usage

esac
