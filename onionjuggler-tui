#!/usr/bin/env sh

## DESCRIPTION
## This file lets you manage your authorized clients for hidden services
## It is a TUI for the onionjuggler-cli with everything integrated in this menu
##
## SYNTAX
## onionjuggler-tui
##
## Lines that begin with "## " try to explain what's going on. Lines
## that begin with just "#" are disabled commands.

###################
#### VARIABLES ####

## check if user configuration is readable and if yes, source it
test -r "${ONIONJUGGLER_CONF:="/etc/onionjuggler.conf"}" && . "${ONIONJUGGLER_CONF}"
## if any of the configurations are empty, use default ones

## system
: "${privilege_command:="sudo"}"
: "${tor_user:="debian-tor"}"
: "${dialog_box:="dialog"}"
: "${web_server:="nginx"}"

## tor defaults
: "${data_dir:="/var/lib/tor"}"
: "${data_dir_services:="${data_dir}/services"}"
: "${data_dir_auth:="${data_dir}/onion_auth"}"

## general
: "${website_dir:="/var/www"}"
export DIALOGRC="${HOME}/.dialogrc-onionjuggler"

## colors
nocolor="\033[0m"
#nobold="\033[21m"
#nounderline="\033[24m"
#bold="\033[1m"
#underline="\033[4m"
#white="\033[97m"
#black="\033[30m"
#red="\033[31m"
#green="\033[32m"
yellow="\033[33m"
#blue="\033[34m"
#magenta="\033[35m"
#cyan="\033[36m"

i=0


###########################
######## FUNCTIONS ########

## display error message with instructions to use the script correctly.
error_msg(){ printf %s"\033[0;31mERROR: ${1}\033[0m\n"; exit 1; }

if ! command -v onionjuggler-cli >/dev/null && test ! -f onionjuggler-cli; then
  error_msg "onionjuggler-cli not found on PATH!"
fi

! command -v "${dialog_box}" >/dev/null && error_msg "dialog_box=${dialog_box} not found on PATH."

case "${dialog_box}" in
  dialog)
    #yes_flag="--yes-label"
    #no_flag="--no-label"
    ok_flag="--ok-label"
    cancel_flag="--cancel-label"
    no_cancel_flag="--no-cancel"
  ;;
  whiptail)
    whiptail_height=1
    #yes_flag="--yes-button"
    #no_flag="--no-button"
    ok_flag="--ok-button"
    cancel_flag="--cancel-button"
    no_cancel_flag="--nocancel"
  ;;
  *) error_msg "dialog_box can be either 'dialog' or 'whiptail', not '${dialog_box}'"
esac

## clear the screen after exiting
trap 'tput reset' EXIT

return_to_tui(){
  printf %s"${yellow}\nPress ENTER to return to the TUI: ${nocolor}" >&2
  # shellcheck disable=SC2034
  read -r confirmation
}

## $1 [checklist|menu]
## $2 complementary title
service_menu(){
  dialog_type="${1}"
  compl_title="${2}"
  i=0
  for service in $("${privilege_command}" -u "${tor_user}" ls "${data_dir_services}"); do
    i=$((i+1))
    onion_hostname="$("${privilege_command}" -u "${tor_user}" grep ".onion" "${data_dir_services}"/"${service}"/hostname 2>/dev/null)"
    case "${dialog_type}" in
      checklist) service_list="$(printf "%s\n%s\n%s\n%s\n" "${service_list}" "${service}" "${onion_hostname%.onion}" 0)";;
      menu) service_list="$(printf "%s\n%s\n%s\n" "${service_list}" "${service}" "${onion_hostname%.onion}")";;
    esac
  done

  if [ -n "${service_list}" ]; then
    title="OnionJuggler - ${compl_title}"
    menu="\nUse spacebar to select:"
    [ "${i}" -gt 11 ] && i="11"
    case "${dialog_type}" in
      checklist)
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --clear --separate-output --backtitle "${backtitle}" --title "${title}" --"${dialog_type}" "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${service_list} 3>&1 1>&2 2>&3)"
      ;;
      menu)
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" --"${dialog_type}" "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${service_list} 3>&1 1>&2 2>&3)"
      ;;
    esac
    service_name_list=""
    [ -n "${choice_service}" ] && service_name_list="$(printf %s"${choice_service}" | sed "s/ /,/g")"
  fi
}


###########################

title="OnionJuggler - Main Menu"
menu="\nUse enter/spacebar to select:"
backtitle="OnionJuggler - Onion Services Manager"
if [ -z "$("${privilege_command}" -u "${tor_user}" ls "${data_dir_services}")" ]; then
  choice_main="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
  "${ok_flag}" "Select" "${no_cancel_flag}" --menu "${menu}" "$((13+whiptail_height))" 80 5 \
  "QUIT" "Exit menu and clear the screen" \
  "ENABLE" "Enable a onion service" \
  "AUTH_CLIENT" "Manage your client keys of remote service" \
  "VANGUARDS" "Add to protect against traffic analysis" \
  "IMPORT" "Import backup from another machine" \
  3>&1 1>&2 2>&3)"
else
  choice_main="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
  "${ok_flag}" "Select" "${no_cancel_flag}" --menu "${menu}" "$((20+whiptail_height))" 80 12 \
  "QUIT" "Exit menu and clear the screen" \
  "ENABLE" "Enable an onion service" \
  "DISABLE" "Disable chosen onion service" \
  "RENEW" "Renew onion service address" \
  "AUTH_SERVER" "Add or Remove client authorization from your service" \
  "AUTH_CLIENT" "Manage your client keys of remote service" \
  "CREDENTIALS" "See credentials (onion address, authorized clients)" \
  "WEB_SERVER" "Serve a website folder on onion domain" \
  "VANGUARDS" "Add to protect against traffic analysis" \
  "LOCATION" "Guided steps to add onion-location to your plainnet website" \
  "IMPORT" "Import backup from another machine" \
  "EXPORT" "Export backup to another machine" \
  3>&1 1>&2 2>&3)"
fi


case "${choice_main}" in

  ENABLE)

    title="Onion Service - Activation"
    menu="Choose socket type:"
    choice_socket="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
    --menu "${menu}" "$((9+whiptail_height))" 70 2 \
    "UNIX" "unix:path (more secure)" \
    "TCP" "addr:port (leak onion address to the local network)" \
    3>&1 1>&2 2>&3)"

    SERVICE_MSG="\nName your service directory in one string and no space.\n(e.g.: torbox.ch)"
    UNIX_PORT_MSG="\nYou are able to configure up to two virtual ports. Insert them separated by space. (e.g.: 80 443)"
    TCP_PORT_MSG="\nYou are able to configure up to two virtual ports and targets, being only one virtual port required to create a service.
    \nInsert them separated by space in the following order:\nVIRPORT TARGET VIRTPORT2 TARGET2\n(e.g.: 80 5000 443 5001) (e.g.: 80 192.168.5.10:5000 443 192.168.5.10:5001)"

    case "${choice_socket}" in

      UNIX)
        service_name="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --inputbox "${SERVICE_MSG}" 10 60 3>&1 1>&2 2>&3)"
        if [ -n "${service_name}" ]; then
          service_ports="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
          --inputbox "${UNIX_PORT_MSG}" 10 60 3>&1 1>&2 2>&3)"
          if [ -n "${service_ports}" ]; then
            tput reset
            onionjuggler-cli on --service "${service_name}" --socket unix --port "${service_ports}"
            return_to_tui
          fi
        fi
      ;;

      TCP)
        service_name="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --inputbox "${SERVICE_MSG}" 10 60 3>&1 1>&2 2>&3)"
        if [ -n "${service_name}" ]; then
          service_ports="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
          --inputbox "${TCP_PORT_MSG}" 13 80 3>&1 1>&2 2>&3)"
          if [ -n "${service_ports}" ]; then
            onionjuggler-cli on --service "${service_name}" --socket tcp --port "${service_ports}"
            return_to_tui
          fi
        fi
      ;;

    esac
  ;;


  DISABLE)
    service_menu checklist "Disable"
    if [ -n "${service_name_list}" ]; then
      title="Onion Service - Deactivation"
      menu="
DISABLE: Service will be disabled, lines from the torrc deleted but the folder will be kept.

PURGE: Service will be permanently disabled, all the directory data, including hidden service keys and clients will be deleted permanently (you won't be able to use the same onion address)."
      choice_disable="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
      "${ok_flag}" "Select" "${cancel_flag}" "Cancel" --menu "${menu}" "$((15+whiptail_height))" 80 2 \
      "DISABLE" "Only disable (remove configuration lines)" \
      "PURGE" "Disable and Purge HiddenServiceDir (delete onion keys)" \
      3>&1 1>&2 2>&3)"
      if [ -n "${choice_disable}" ]; then
        [ "${choice_disable}" = "PURGE" ] && purge="--purge"
        tput reset
        onionjuggler-cli off --service "${service_name_list}" "${purge}"
        return_to_tui
      else
        text="\nOperation canceled, nothing was executed."
        "${dialog_box}" --backtitle "${backtitle}" --title "${title}" --msgbox "${text}" 10 50
      fi
    fi
  ;;

  ## TODO: add warning as in purge before confirming.
  RENEW)
    service_menu checklist "Renew"
    if [ -n "${service_name_list}" ]; then
      tput reset
      onionjuggler-cli renew --service "${service_name_list}"
      return_to_tui
    fi
  ;;


  AUTH_SERVER)
    i=0
    service_list=""
    for service in $("${privilege_command}" -u "${tor_user}" ls "${data_dir_services}"); do
      ## only include services that have at least one client
      client_exist="$("${privilege_command}" -u "${tor_user}" ls "${data_dir_services}"/"${service}"/authorized_clients/ | sed "s/\.auth//g")"
      if [ -n "${client_exist}" ]; then
        i=$((i+1))
        onion_hostname="$("${privilege_command}" -u "${tor_user}" grep ".onion" "${data_dir_services}"/"${service}"/hostname 2>/dev/null)"
        service_list_menu="$(printf "%s\n%s\n%s\n" "${service_list}" "${service}" "${onion_hostname%.onion}")"
        service_list_checklist="$(printf "%s\n%s\n%s\n%s\n" "${service_list}" "${service}" "${onion_hostname%.onion}" 0)"
      fi
    done
    title="Client Authorization - Server"
    menu="\nManage client authorization of your services:"
    if [ -z "${service_list_menu}" ]; then
      auth_type="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
      "${ok_flag}" "Select" "${cancel_flag}" "Cancel" --menu "${menu}" "$((10+whiptail_height))" 60 2 \
      "GEN" "Generate a new key pair (public and private key)" \
      "PUB" "Register the client public key" \
      3>&1 1>&2 2>&3)"
    else
      auth_type="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
      "${ok_flag}" "Select" "${cancel_flag}" "Cancel" --menu "${menu}" "$((13+whiptail_height))" 60 5 \
      "LIST" "List all clients for specific HiddenService" \
      "EDIT" "Edit an existing authorization" \
      "GEN" "Generate a new key pair (public and private key)" \
      "PUB" "Register the client public key" \
      "DEL" "Remove a client" \
      3>&1 1>&2 2>&3)"
    fi

    case "${auth_type}" in

      LIST)
        title="Client Authorization - Server - List "
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --clear --separate-output --backtitle "${backtitle}" --title "${title}" --checklist "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${service_list_checklist} 3>&1 1>&2 2>&3)"
        service_name_list=""
        [ -n "${choice_service}" ] && service_name_list="$(printf %s"${choice_service}" | sed "s/ /,/g")"
        if [ -n "${service_name_list}" ]; then
          tput reset
          onionjuggler-cli auth-server --list --service "${service_name_list}"
          return_to_tui
        fi
      ;;

      EDIT)
        title="Client Authorization - Server - Edit"
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" --menu "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${service_list_menu} 3>&1 1>&2 2>&3)"
        if [ -n "${choice_service}" ]; then
          service="${choice_service}"
          i=0
          for client in $("${privilege_command}" -u "${tor_user}" ls "${data_dir_services}"/"${service}"/authorized_clients/ | sed "s/\.auth//g"); do
            i=$((i+1))
            client_list="$(printf "%s\n%s\n%s\n" "${client_list}" "${client}" ".")"
          done
          # shellcheck disable=SC2086
          choice_client="$("${dialog_box}" --backtitle "${backtitle}" --title "${title}" --menu "${menu}" \
          "$((i+8+whiptail_height))" 50 "${i}" ${client_list} 3>&1 1>&2 2>&3)"
          [ -n "${choice_client}" ] && "${privilege_command}" "${EDITOR:-vi}" "${data_dir_services}"/"${service}"/authorized_clients/"${choice_client}".auth
        fi
      ;;

      GEN)
        service_menu checklist "Auth Server Gen"
        if [ -n "${service_name_list}" ]; then
          title="Client Authorization - Server - Generate"
          menu="\nClient(s) name(s) delimited by space or/and comma (e.g.: alice, bob, carol)"
          client_name_list="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
          --inputbox "${menu}" 10 50 3>&1 1>&2 2>&3)"
          client_name_list="$(printf %s"${client_name_list}" | tr -s ' ' ',' | tr -s ',' ',')"
          if { [ -n "${service_name_list}" ] && [ -n "${client_name_list}" ]; }; then
            tput reset
            onionjuggler-cli auth-server --on --service "${service_name_list}" --client "${client_name_list}"
            return_to_tui
          fi
        fi
      ;;

      PUB)
        service_menu menu "Auth Server Pub"
        if [ -n "${service_name_list}" ]; then
          title="Client Authorization - Server - Pub"
          menu="\nClient name (e.g.: alice)"
          client_name_list="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
          --inputbox "${menu}" 9 50 3>&1 1>&2 2>&3)"
          if [ -n "${client_name_list}" ]; then
            title="Client Authorization - Server - Pub"
            menu="\nClient public key in base32:"
            client_pub_key="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
            --inputbox "${menu}" 9 50 3>&1 1>&2 2>&3)"
            if [ -n "${client_pub_key}" ]; then
              tput reset
              onionjuggler-cli auth-server --on --service "${service_name_list}" --client "${client_name_list}" --client-pub-key "${client_pub_key}"
              return_to_tui
            fi
          fi
        fi
      ;;

      DEL)
        title="Client Authorization - Server - Deletion"
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --separate-output --backtitle "${backtitle}" --title "${title}" --checklist "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${service_list_checklist} 3>&1 1>&2 2>&3)"
        if [ -n "${choice_service}" ]; then
          # shellcheck disable=SC2086
          service_total=$(IFS=' '; set -f -- ${choice_service}; printf %s"${#}")
          for service in $(printf %s"${choice_service}"); do
            client="$("${privilege_command}" -u "${tor_user}" ls "${data_dir_services}"/"${service}"/authorized_clients/ | sed "s/\.auth//g")"
            client_list="$(printf "%s\n%s\n" "${client_list}" "${client}")"
          done
          i=0
          ## intersection of clients on the chosen services
          for client in $(printf %s"${client_list}" | tr " " "\n" | sort | uniq -c | grep "${service_total}" | sed "s/${service_total}//g" | tr -s "\n" " "); do
            i=$((i+1))
            client_build_list="$(printf "%s\n%s\n%s\n%s\n" "${client_build_list}" "${client}" "." 0)"
          done
          if [ -z "${client_build_list}" ]; then
            title="Onion Service - INFO"
            text_no_client="\nNo client exist inside the intersection of the chosen services."
            "${dialog_box}" --backtitle "${backtitle}" --title "${title}" --msgbox "${text_no_client}" 10 50
          else
            [ "${i}" -gt 11 ] && i="11"
            # shellcheck disable=SC2086
            choice_client="$("${dialog_box}" --separate-output --backtitle "${backtitle}" --title "${title}" --checklist "${menu}" \
            "$((i+8+whiptail_height))" 50 "${i}" ${client_build_list} 3>&1 1>&2 2>&3)"
          fi
          if [ -n "${choice_client}" ]; then
            service_name_list="$(printf %s"${choice_service}" | sed "s/ /,/g")"
            client_name_list="$(printf %s"${choice_client}" | sed 's/ /,/g')"
          fi
        fi
        if [ -n "${client_name_list}" ]; then
          tput reset
          onionjuggler-cli auth-server --off --service "${service_name_list}" --client "${client_name_list}"
          return_to_tui
        fi
      ;;

    esac
  ;;


  AUTH_CLIENT)
    i=0
    for onion_auth in $("${privilege_command}" -u "${tor_user}" ls "${data_dir_auth}"/); do
      onion_auth_name=${onion_auth%.auth_private}
      i=$((i+1))
      onion_auth_list="$(printf "%s\n%s\n%s\n" "${onion_auth_list}" "${onion_auth_name}" ".")"
    done
    title="Client Authorization - Client"
    menu="\nAs the onion service client:"
    if [ -z "${onion_auth_list}" ]; then
      auth_type="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
      "${ok_flag}" "Select" "${cancel_flag}" "Cancel" --menu "${menu}" "$((10+whiptail_height))" 80 2 \
      "GEN" "Generate a new key pair (public and private key)" \
      "PRIV" "Register your private key" \
      3>&1 1>&2 2>&3)"
    else
      auth_type="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
      "${ok_flag}" "Select" "${cancel_flag}" "Cancel" --menu "${menu}" "$((13+whiptail_height))" 80 5 \
      "LIST" "List all the authorizations inside ClientOnionAuthDir" \
      "EDIT" "Edit your client authorizations" \
      "GEN" "Generate a new key pair (public and private key)" \
      "PRIV" "Register your private key" \
      "DEL" "Remove expired authorization" \
      3>&1 1>&2 2>&3)"
    fi

    case "${auth_type}" in

      LIST)
        onionjuggler-cli auth-client --list
        return_to_tui
      ;;

      EDIT)
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_onion_auth="$("${dialog_box}" --title "${title}" --menu "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${onion_auth_list} 3>&1 1>&2 2>&3)"
        [ -n "${choice_onion_auth}" ] && "${privilege_command}" "${EDITOR:-vi}" "${data_dir_auth}"/"${choice_onion_auth}".auth_private
      ;;

      GEN)
        menu="\nInsert the onion address of the service you want to authenticate:"
        onion_hostname="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --inputbox "${menu}" 9 80 3>&1 1>&2 2>&3)"
        if [ -n "${onion_hostname}" ]; then
          tput reset
          onionjuggler-cli auth-client --on --onion "${onion_hostname}"
          return_to_tui
        fi
      ;;

      PRIV)
        menu="\nInsert the onion address of the service you want to authenticate:"
        onion_hostname="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --inputbox "${menu}" 9 80 3>&1 1>&2 2>&3)"
        menu="Insert the client's private key:"
        client_priv_key="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --inputbox "${menu}" 9 80 3>&1 1>&2 2>&3)"
        if { [ -n "${onion_hostname}" ] && [ -n "${client_priv_key}" ]; }; then
          tput reset
          onionjuggler-cli auth-client --on --onion "${onion_hostname}" --client-priv-key "${client_priv_key}"
          return_to_tui
        fi
      ;;

      DEL)
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_onion_auth="$("${dialog_box}" --separate-output --title "${title}" --checklist "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${onion_auth_list} 3>&1 1>&2 2>&3)"
        [ -n "${choice_onion_auth}" ] && ONION_AUTH_NAME_LIST="$(printf %s"${ONION_AUTH_NAME_LIST}" | sed "s/ /,/g")"
        if [ -n "${ONION_AUTH_NAME_LIST}" ]; then
          tput reset
          onionjuggler-cli auth-client --off --onion "${ONION_AUTH_NAME_LIST}"
          return_to_tui
        fi
      ;;

    esac
  ;;


  CREDENTIALS)
    service_menu checklist "Credentials"
    if [ -n "${service_name_list}" ]; then
      tput reset
      onionjuggler-cli list --service "${service_name_list}"
      return_to_tui
    fi
  ;;


  LOCATION)
    service_menu menu "Location"
    if [ -n "${service_name_list}" ]; then
      title="Onion-Location"
      choice_action="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
      "${ok_flag}" "Select" "${cancel_flag}" "Exit" --menu "${menu}" "$((11+whiptail_height))" 50 3 \
      "NGINX" "Nginx web server header" \
      "APACHE2" "Apache2 web server header" \
      "HTML" "Html <meta> http-equiv attribute" \
      3>&1 1>&2 2>&3)"
      if [ -n "${choice_action}" ]; then
        tput reset
        action="$(echo "${choice_action}" | tr '[:upper:]' '[:lower:]')"
        onionjuggler-cli location "--${action}" --service "${service_name_list}"
        return_to_tui
      fi
    fi
  ;;


  WEB_SERVER)
    { [ "${web_server}" != "nginx" ] && [ "${web_server}" != "apache2" ]; } && error_msg "web_server can be either 'nginx' or 'apache2', not '${web_server}'"
    title="Web server - Status"
    menu="\nWould you like to enable or disable serving a website?"
    status="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" --menu "${menu}" "$((12+whiptail_height))" 50 3 \
    "LIST" "List enabled websites" \
    "ON" "Serve website" \
    "OFF" "Stop serving website" \
    3>&1 1>&2 2>&3)"
    status="$(echo "${status}" | tr '[:upper:]' '[:lower:]')"
    case "${status}" in
      list)
        tput reset
        onionjuggler-cli "${web_server}" "${status}"
        return_to_tui
      ;;
      on)
        service_menu menu "Web server "
        if [ -n "${service_name_list}" ]; then
          i=0
          for folder in $("${privilege_command}" ls "${website_dir}"); do
            i=$((i+1))
            folder_list="$(printf "%s\n%s\n%s\n" "${folder_list}" "${folder}" ".")"
          done
          title="Folder"
          menu="\nUse spacebar to select:"
          [ "${i}" -gt 11 ] && i="11"
          # shellcheck disable=SC2086
          choice_folder="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" --menu "${menu}" \
          "$((i+8+whiptail_height))" 50 "${i}" ${folder_list} 3>&1 1>&2 2>&3)"
          [ -n "${choice_folder}" ] && folder_name_list="$(printf %s"${choice_folder}" | sed "s/ /,/g")"
          if [ -n "${folder_name_list}" ]; then
            tput reset
            onionjuggler-cli web "--${status}" --service "${service_name_list}" --folder "${folder_name_list}"
            return_to_tui
          fi
        fi
      ;;
      off)
        i=0
        for service in $("${privilege_command}" ls /etc/"${web_server}"/sites-enabled/ | sed "s/-onion.conf//g"); do
          i=$((i+1))
          service_list="$(printf "%s\n%s\n" "${service_list}" "${service}" "." 0)"
        done
        title="Web Server - Disable Site"
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --separate-output --clear --backtitle "${backtitle}" --title "${title}" --checklist "${menu}" \
        "$((i+8+whiptail_height))" 50 "${i}" ${service_list} 3>&1 1>&2 2>&3)"
        [ -n "${choice_service}" ] && service_name_list="$(printf %s"${choice_service}" | sed "s/ /,/g")"
        if [ -n "${service_name_list}" ]; then
          tput reset
          onionjuggler-cli web "--${status}" --service "${service_name_list}"
          return_to_tui
        fi
      ;;
    esac
  ;;


  VANGUARDS)
    title="Vanguards"
    if [ -z "$("${privilege_command}" -u "${tor_user}" ls "${data_dir}"/vanguards)" ]; then
      choice_action="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
      "${ok_flag}" "Select" "${cancel_flag}" "Exit" --menu "${menu}" "$((9+whiptail_height))" 50 1 \
      "ON" "Use Vanguards protections" 3>&1 1>&2 2>&3)"
    else
      choice_action="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
      "${ok_flag}" "Select" "${cancel_flag}" "Exit" --menu "${menu}" "$((11+whiptail_height))" 50 3 \
      "LIST" "Follow Vanguards logs" \
      "ON" "Upgrade Vanguards configuration and repository" \
      "OFF" "Delete the Vanguards directory" \
      3>&1 1>&2 2>&3)"
    fi
    if [ "${choice_action}" = "LOGS" ]; then
      tput reset
      trap 'onionjuggler-tui; exit 0' INT
      "${privilege_command}" tail -f -n 25 /var/log/tor/vanguards.log
    elif [ -n "${choice_action}" ]; then
      tput reset
      onionjuggler-cli vanguards "--${choice_action}"
      return_to_tui
    fi
  ;;


  IMPORT)
    tput reset
    onionjuggler-cli backup --integrate
    return_to_tui
  ;;


  EXPORT)
    tput reset
    onionjuggler-cli backup --create
    return_to_tui
  ;;


  QUIT) exit 0;;

esac

tput reset
onionjuggler-tui
