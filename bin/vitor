#!/usr/bin/env sh

## Copy tor config to temp, modify it, verify it is ok then save back to origin

file_mode="644"
me="${0##*/}"

notice(){ printf '%s\n' "${me}: ${1}" 1>&2; }
error_msg(){ notice "${1}"; exit 1; }
usage(){ printf '%s\n' "Usage: ${me} [-f tor_conf] [-u tor_user]
Note:
  ${me}               run ${me} as the root user with 'sudo' or 'doas'
  -f tor_conf         if 'tor_conf' is not set, default to /etc/tor/torrc
                      if the file doesn't exist, will create it after passing all tests.
  -u tor_user         if 'tor_user' is not set, the tor_conf must contain the \"User\" option
                      else it tor fails to validate the configuration"
  exit 1
}
get_arg(){
  case "${2}" in
    ""|-*) error_msg "Option '${1}' requires an argument.";;
  esac
}

[ -z "${1}" ] && usage
while :; do
  case "${1}" in
    -f) get_arg "${1}" "${2}"; tor_conf="${2}"; shift 2;;
    -u) get_arg "${1}" "${2}"; tor_user="${2}"; shift 2;;
    "") break;;
    *) usage;;
  esac
done

[ -n "${SUDO_USER}" ] && su_cmd="sudo"
[ -n "${DOAS_USER}" ] && su_cmd="doas"
{ [ "$(id -u)" -ne 0 ] || [ -z "${su_cmd}" ]; } && error_msg "Run ${me} as the root user with 'sudo' or 'doas'."

## get editor. First try environment variables [SUDO|DOAS]_EDITOR, if empty try VISUAL, if empty try EDITOR, if empty use Vi
eval PRIVILEGED_EDITOR='$'"$(printf %s"${su_cmd##*/}" | tr '[:lower:]' '[:upper:]')_EDITOR"
editor="${PRIVILEGED_EDITOR:-"${VISUAL:-"${EDITOR:-vi}"}"}"
## get interrupt signal
get_intr="$(stty -a | sed -n '/.*intr = / {s///;s/;.*$//;p;}')"

## get first argument, if empty, onionjuggler.conf variable, if empty, fallback to default torrc
file="${1:-"${tor_conf:-"/etc/tor/torrc"}"}"
## remove last backlash if inserted by mistake
file="${file%*/}"
## get just the directory
file_dir="${file%/*}"
[ ! -d "${file_dir}" ] && error_msg "${file_dir} is not a directory or doesnt exist."
[ ! -w "${file_dir}" ] && error_msg "${file_dir} is not writable by ${USER}."
[ ! -r "${file_dir}" ] && error_msg "${file_dir} is not readble by ${USER}."

## file is the first argument, replace '.' and '-' for '_'.
file_name="$(printf %s"${file##*/}" | tr "." "_" | tr "-" "_")"
file_name_tmp="$(printf %s"mkstemp(${file_dir}/${file_name}.XXXXXX)" | m4)"
chmod "${file_mode}" "${file_name_tmp}"
trap 'rm -f ${file_name_tmp}' EXIT

if [ -f "${file}" ]; then
  [ ! -r "${file}" ] && error_msg "${file} is not readable."
  [ ! -w "${file}" ] && error_msg "${file} is not writable."
  cp -p "${file}" "${file_name_tmp}"
fi

## if User is set on the config, then run tor as root
"${su_cmd}" grep -q "^User" "${file_name_tmp}" && su_tor_cmd="${su_cmd}"
## user may not be on this config, but on another, so run tor as its user if $su_tor_cmd is empty
if [ -z "${su_tor_cmd}" ]; then
  [ -z "${tor_user}" ] && error_msg "You are not running tor with its user. Specify the tor user."
  su_tor_cmd="${su_cmd} -u ${tor_user}"
fi

## open temporary file to be edited
"${editor}" "${file_name_tmp}"
## while the config is not ok, loop to enter and continue or interrupt.
while ! ${su_tor_cmd} tor -f "${file_name_tmp}" --verify-config --hush; do
  tor_check="$(${su_tor_cmd} tor -f "${file_name_tmp}" --verify-config --hush)"
  printf '%s\n' "${tor_check}" | grep -q "Permission denied" && error_msg "Got permission denied to read tor directories, did you specify the tor user? If yes, maybe the directories do not have the right owner."
  printf '%s\n' "${tor_check}" | grep -q "You are running Tor as root. You don't need to, and you probably shouldn't." && error_msg "Do not run tor as root if you did not set the \"User\" option."
  printf '%s\n' "${tor_check}" | grep -q "If you set the \"User\" option, you must start Tor as root." && error_msg "Specify the root user."
  notice "The temporary copy on ${file_name_tmp} is not a valid configuration."
  notice "Press enter to edit ${file} again to fix it, or interrupt (${get_intr}) to cancel."
  # shellcheck disable=SC2034
  read -r status
  "${editor}" "${file_name_tmp}"
done

notice "Configuration OK"
if cmp -s "${file_name_tmp}" "${file}"; then
  error_msg "No changes made. ${file} unchanged."
else
  cp -p "${file_name_tmp}" "${file}" && notice "${file} updated." && exit 0
fi
