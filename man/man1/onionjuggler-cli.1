.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "onionjuggler-cli" "1" "September 2069" "Dinamically juggle with onion services with a POSIX compliant shell" ""
.hy
.SH NAME
.PP
onionjuggler-cli - Dinamically juggle with onion services with a POSIX
compliant shell
.SH SYNOPSIS
.PP
\f[B]onionjuggler-cli\f[R] \f[B]command\f[R]
[\f[B]--option\f[R]<=\f[I]ARGUMENT\f[R]>]
.PD 0
.P
.PD
.PP
\f[B]onionjuggler-cli restore-torrc\f[R]
.PD 0
.P
.PD
\f[B]onionjuggler-cli on\f[R] [\f[B]--service\f[R] <\f[I]SERVICE\f[R]>]
[\f[B]--version\f[R] <\f[I]VERSION\f[R]>] [\f[B]--socket\f[R]
<\f[I]tcp\f[R]>] [\f[B]--port\f[R]
<\f[I]VIRTPORT\f[R][,\f[I]TARGET\f[R]][,\f[I]VIRTPORT2\f[R]][,\f[I]TARGET2\f[R]]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli on\f[R] [\f[B]--service\f[R] <\f[I]SERVICE\f[R]>]
[\f[B]--version\f[R] <\f[I]VERSION\f[R]>] [\f[B]--socket\f[R]
<\f[I]unix\f[R]> [\f[B]--port\f[R]
[\f[I]VIRTPORT\f[R][,\f[I]VIRTPORT2\f[R]]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli off\f[R] [\f[B]--service\f[R]
<\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]>] [\f[B]--purge\f[R]]
.PD 0
.P
.PD
\f[B]onionjuggler-cli list\f[R] [\f[B]--service\f[R]
<\f[I]\[at]all\f[R]|\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]>]
[\f[B]--quiet\f[R]]
.PD 0
.P
.PD
\f[B]onionjuggler-cli renew\f[R] [\f[B]--service\f[R]
<\f[I]\[at]all\f[R]|\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli auth-server\f[R] [\f[B]--on\f[R]]
[\f[B]--service\f[R] <\f[I]SERVICE\f[R]>] [\f[B]--client\f[R]
<\f[I]CLIENT\f[R]>] [\f[B]--client-pub-key\f[R]
<\f[I]CLIENT_PUB_KEY\f[R]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli auth-server\f[R] [\f[B]--on\f[R]]
[\f[B]--service\f[R]
<\f[I]\[at]all\f[R]|\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]>]
[\f[B]--client\f[R] <\f[I]CLIENT1\f[R],\f[I]CLIENT2\f[R],\f[I]...\f[R]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli auth-server\f[R] [\f[B]--off\f[R]]
[\f[B]--service\f[R]
<\f[I]\[at]all\f[R]|\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]>]
[\f[B]--client\f[R]
<\f[I]\[at]all\f[R]|\f[I]CLIENT1\f[R],\f[I]CLIENT2\f[R],\f[I]...\f[R]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli auth-server\f[R] [\f[B]--list\f[R]]
[\f[B]--service\f[R]
<\f[I]\[at]all\f[R]|\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli auth-client\f[R] [\f[B]--on\f[R]]
[\f[B]--onion\f[R] <\f[I]ONION\f[R]>] [\f[B]--client-priv-key\f[R]
<\f[I]CLIENT_PRIV_KEY\f[R]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli auth-client\f[R] [\f[B]--off\f[R]]
[\f[B]--onion\f[R] <\f[I]ONION1\f[R],\f[I]ONION2\f[R],\f[I]...\f[R]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli auth-client\f[R] [\f[B]--list\f[R]]
.PD 0
.P
.PD
\f[B]onionjuggler-cli web\f[R] [\f[B]--on\f[R]] [\f[B]--service\f[R]
<\f[I]SERVICE\f[R]>] [\f[B]--folder\f[R] <\f[I]FOLDER\f[R]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli web\f[R] [\f[B]--off\f[R]] [\f[B]--service\f[R]
<\f[I]SERVICE\f[R]>]
.PD 0
.P
.PD
\f[B]onionjuggler-cli web\f[R] [\f[B]--list\f[R]]
.PD 0
.P
.PD
\f[B]onionjuggler-cli location\f[R] [\f[B]--service\f[R]
<\f[I]SERVICE\f[R]>]
[\f[B]--nginx\f[R]|\f[B]--apache2\f[R]|\f[B]--html\f[R]]
.PD 0
.P
.PD
\f[B]onionjuggler-cli backup\f[R]
[\f[B]--create\f[R]|\f[B]--integrate\f[R]]
.PD 0
.P
.PD
\f[B]onionjuggler-cli vanguards\f[R]
[\f[B]--on\f[R]|\f[B]--list\f[R]|\f[B]--upgrade\f[R]|\f[B]--off\f[R]]
.PD 0
.P
.PD
\f[B]onionjuggler-cli\f[R]
[\f[B]-h\f[R]|\f[B]-help\f[R]|\f[B]--help\f[R]|\f[B]help\f[R]]
.SH DESCRIPTION
.PP
\f[B]onionjuggler-cli\f[R] is a part of OnionJuggler, a combination of
POSIX compliant scripts helps the interaction with onion service
configuration and files to speed up usage and avoid misconfiguration.
The onionjuggler variables must be inside
/etc/onionjuggler/onionjuggler.conf.
.PP
The script tries its best to avoid inserting incorrect lines to torrc,
that would make tor fail.
Because of this, any incorrect command flagged show the error mesage to
understand what is the cause of the error and display the commands help
option, finally exit the script without modifying the torrc.
At least two arguments are required for every command, some could have
more than one required argument.
.SH OPTIONS
.SS VARIABLES
.TP
\f[B][VAR]\f[R]
Variable is required.
.TP
\f[B]<\f[BI]VAR\f[B]>\f[R]
Variable is optional.
.TP
\f[B]on\f[R]
Enable by adding configuration.
.TP
\f[B]off\f[R]
Disable by removing the configuration.
.TP
\f[B]list\f[R]
List enabled configuration.
.TP
\f[B]purge\f[R]
Remove permanently the data.
.TP
\f[B]\[at]all\f[R], \f[B]\[at]all\f[R]
Include all available services or clients.
.TP
\f[B]SERV1,SERV2...\f[R], \f[B]CLIENT1,CLIENT2,...\f[R], \f[B]ONION1,ONION2\f[R]
List enabled option.
e.g: ssh,xmpp,irc or alice,bob.
.TP
\f[B]VERSION\f[R]
Onion service version.
Currently only valid value is 3.
.TP
\f[B]SERV\f[R]
Service name.
String format.
.TP
\f[B]VIRTPORT\f[R]
Virtual port.
Integer format.
.TP
\f[B]TARGET\f[R]
Target socket.
TCP needs to be specified, the format is \f[I]addr:port\f[R].
Abscense of the address will bind to localhost using the address
\f[I]127.0.0.1\f[R] for uniformity.
Abscense of target and will use the same port as the virtual port,
specifying just the port will bind to localhost using the address
\f[I]127.0.0.1\f[R] for uniformity.
Unix target is handled by the code using the format \f[I]unix:path\f[R]
and does not require manual selection.
Integer format.
.TP
\f[B]ONION\f[R]
Onion address of the authenticated service for the client to connect to.
Only accepted format is for onion v3 addresses, which contains 56
characters using the base32 format with the range \f[I]a-z2-7\f[R] and
ending with (dot)onion.
String format.
.TP
\f[B]command\f[R] [\f[B]--option\f[R]<=\f[I]ARGUMENT\f[R]>]
Commands that accept arguments can be specified as follow: --service ssh
OR --service \[dq]ssh nextcloud\[dq] OR --service=ssh,nextcloud
.TP
\f[B]ssh\f[R], \f[B]xmpp\f[R], \f[B]nextcloud\f[R]
Example of onion services directory names.
.SS ARGUMENTS
.TP
\f[B]restore-torrc\f[R]
Restore the latest torrc backup and reload tor.
Every time onionjuggler-cli is ran, it creates a torrc.bak, with this
option, it will copy the backup file to the torrc named file.
File(s) modified: torrc.
.TP
\f[B]on\f[R] \f[B]--service\f[R] [\f[I]SERV\f[R]] \f[B]--version\f[R] \f[I]3\f[R] \f[B]--socket\f[R] \f[I]tcp\f[R] \f[B]--port\f[R] [\f[I]VIRTPORT\f[R],<\f[I]TARGET\f[R]>,<\f[I]VIRTPORT2\f[R]>,<\f[I]TARGET2\f[R]>]
Enable an onion service using TCP socket (addr:port) as target.
If the TARGET is only the port of it TARGET was not provided, will use
the same port as VIRTPORT and bind to 127.0.0.1.
TARGET examples: 127.0.0.1:80, 192.168.1.100:80, 140.82.121.3.
File(s) modified: torrc.
.RS
.IP
.nf
\f[C]
onionjuggler-cli on --service ssh --version 3 --socket tcp --port 22
onionjuggler-cli on --service ssh --version 3 --socket tcp --port \[dq]22 22\[dq]
onionjuggler-cli on --service ssh --version 3 --socket tcp --port=\[dq]22 22 80\[dq]
onionjuggler-cli on --service ssh --version 3 --socket tcp --port=\[dq]22,22,80,80\[dq]
onionjuggler-cli on --service ssh --version 3 --socket tcp --port \[dq]22 127.0.0.1:22\[dq]
onionjuggler-cli on --service ssh --version 3 --socket tcp --port \[dq]22 127.0.0.1:22 80\[dq]
onionjuggler-cli on --service ssh --version 3 --socket tcp --port \[dq]22 127.0.0.1:22 80 127.0.0.1:80\[dq]
\f[R]
.fi
.RE
.TP
\f[B]on\f[R] \f[B]--service\f[R] [\f[I]SERV\f[R]] \f[B]--version\f[R] \f[I]3\f[R] \f[B]--socket\f[R] \f[I]unix\f[R] \f[B]--port\f[R] [\f[I]VIRTPORT\f[R],<\f[I]VIRTPORT2\f[R]>]
Enable an onion service using UNIX socket (unix:path) as target.
The TARGET is handled automatically by the script.
This method avoids leaking the onion service address to the local
network.
File(s) modified: torrc.
.RS
.IP
.nf
\f[C]
onionjuggler-cli on --service web
onionjuggler-cli on --service ssh --socket unix --port 22
onionjuggler-cli on --service ssh --version 3--socket unix --port 22,80
\f[R]
.fi
.RE
.TP
\f[B]off\f[R] \f[B]--service\f[R] [\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]] <\f[I]--purge\f[R]>
Disable an onion service by removing it configuration lines
(HiddenService) from the torrc.
Optionally purge its data directory, which will delete permanently the
onion service folder (HiddenServiceDir).
File(s) modified: torrc and optionally HiddenServiceDir.
.RS
.IP
.nf
\f[C]
onionjuggler-cli off --service ssh
onionjuggler-cli off --service ssh,xmpp
onionjuggler-cli off --service ssh,xmpp --purge
\f[R]
.fi
.RE
.TP
\f[B]list\f[R] \f[B]--service\f[R] [\f[I]\[at]all\f[R]|\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]] <\f[I]--quiet\f[R]>
List onion service information: hostname (address) and in QR encoded
format, clients names and quantity, status if service is active or
inactive regarding the torrc lines (un)present and the HiddenServiceDir
presence, the torrc block.
File(s) modified: none.
.RS
.IP
.nf
\f[C]
onionjuggler-cli list --service ssh
onionjuggler-cli list --service ssh,xmpp
onionjuggler-cli list --service \[at]all
onionjuggler-cli list --service \[at]all --quiet
\f[R]
.fi
.RE
.TP
\f[B]renew\f[R] \f[B]--service\f[R] [\f[I]\[at]all\f[R]|\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]]
Renew onion service hostname (.onion domain) and clients (inside
HiddenServiceDir/authorized_clients/).
The onion service keys (hs_ed25519_public_key and
hs_ed25519_private_key) will be removed to override the hostname file.
File(s) modified: HiddenServiceDir.
.RS
.IP
.nf
\f[C]
onionjuggler-cli renew --service ssh
onionjuggler-cli renew --service ssh,xmpp
onionjuggler-cli renew --service \[at]all
\f[R]
.fi
.RE
.TP
\f[B]auth-server --on\f[R] \f[B]--service\f[R] [\f[I]SERV\f[R]] \f[B]--client\f[R] [\f[I]CLIENT\f[R]] \f[B]--client-pub-key\f[R] <\f[I]CLIENT_PUB_KEY\f[R]>
Authorize to your service a client.
If the client public key is not provided, a new key pair of public and
private keys will be generated, keys are sent to stdout and you should
send to the client.
A $CLIENT.auth file will be created on
HiddenServiceDir/authorized_clients folder.
File(s) modified: HiddenServiceDir/authorized_clients/
.RS
.IP
.nf
\f[C]
onionjuggler-cli auth-server --on --service ssh --client alice
onionjuggler-cli auth-server --on --service ssh --client alice --client-pub-key ABVCL52QL6IRYIOLEAYUVTZY3AIOMDI3AIFBAALZ7HJOHIJFVBIQ
\f[R]
.fi
.RE
.TP
\f[B]auth-server --on\f[R] \f[B]--service\f[R] [\f[I]\[at]all\f[R]|\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]] \f[B]--client\f[R] [\f[I]CLIENT1\f[R],\f[I]CLIENT2\f[R],\f[I]...\f[R]]
Authorize to your service a client.
A key pair of public and private keys will be generated, keys are sent
to stdout and you should send to the client.
A $CLIENT.auth file will be created on
HiddenServiceDir/authorized_clients folder.
File(s) modified: HiddenServiceDir/authorized_clients/
.RS
.IP
.nf
\f[C]
onionjuggler-cli auth-server --on --service ssh --client alice
onionjuggler-cli auth-server --on -service ssh --client alice,bob
onionjuggler-cli auth-server --on -service ssh,xmpp --client alice
onionjuggler-cli auth-server --on -service ssh,xmpp --client alice,bob
onionjuggler-cli auth-server --on -service \[at]all --client alice,bob
onionjuggler-cli auth-server --on -service \[at]all --client \[at]all
\f[R]
.fi
.RE
.TP
\f[B]auth-server --off\f[R] \f[B]--service\f[R] [\f[I]\[at]all\f[R]|\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]] \f[B]--client\f[R] [\f[I]\[at]all\f[R]|\f[I]CLIENT1\f[R],\f[I]CLIENT2\f[R],\f[I]...\f[R]]
Deauthorize from your service a client that is inside
HiddenServiceDir/authorized_clients folder.
File(s) modified: HiddenServiceDir/authorized_clients/
.RS
.IP
.nf
\f[C]
onionjuggler-cli auth-server --off --service ssh --client alice
onionjuggler-cli auth-server --off --service ssh --client alice,bob
onionjuggler-cli auth-server --off --service ssh,xmpp --client alice
onionjuggler-cli auth-server --off --service ssh,xmpp --client alice,bob
onionjuggler-cli auth-server --off --service \[at]all --client alice,bob
onionjuggler-cli auth-server --off --service \[at]all --client \[at]all
\f[R]
.fi
.RE
.TP
\f[B]auth-server --list\f[R] \f[B]--service\f[R] [\f[I]\[at]all\f[R]|\f[I]SERV1\f[R],\f[I]SERV2\f[R],\f[I]...\f[R]]
List authorized clients and the respective public keys that are inside
HiddenServiceDir/authorized_clients folder.
File(s) modified: none
.RS
.IP
.nf
\f[C]
onionjuggler-cli auth-server --list --service ssh
onionjuggler-cli auth-server --list --service ssh,xmpp
onionjuggler-cli auth-server --list --service \[at]all
\f[R]
.fi
.RE
.TP
\f[B]auth-client --on\f[R] \f[B]--onion\f[R] [\f[I]ONION\f[R]] \f[B]--client-priv-key\f[R] <\f[I]CLIENT_PRIV_KEY\f[R]>
Authenticate as a client to a remote onion serivce.
If the client private keys is not provided, a new key pair of public and
private keys will be generated, keys are sent to stdout and you should
send to the onion service operator.
Add a $ONION.auth_private to ClientOnionAuthDir.
File(s) modified: ClientOnionAuthDir.
.RS
.IP
.nf
\f[C]
onionjuggler-cli auth-client --on --onion fe4avn4qtxht5wighyii62n2nw72spfabzv6dyqilokzltet4b2r4wqd.onion
onionjuggler-cli auth-client --on --onion fe4avn4qtxht5wighyii62n2nw72spfabzv6dyqilokzltet4b2r4wqd.onion --client-priv-key UBVCL52FL6IRYIOLEAYUVTZY3AIOMDI3AIFBAALZ7HJOHIJFVBIQ
\f[R]
.fi
.RE
.TP
\f[B]auth-client --off\f[R] \f[B]--onion\f[R] [\f[I]ONION1\f[R],\f[I]ONION2\f[R],\f[I]...\f[R]]
Deauthenticate from a remote onion serivce.
Remove the $ONION.auth_private file from ClientOnionAuthDir.
File(s) modified: ClientOnionAuthDir/.
.RS
.IP
.nf
\f[C]
onionjuggler-cli auth-client --off --onion fe4avn4qtxht5wighyii62n2nw72spfabzv6dyqilokzltet4b2r4wqd.onion
onionjuggler-cli auth-client --off --onion fe4avn4qtxht5wighyii62n2nw72spfabzv6dyqilokzltet4b2r4wqd.onion,yyyzxhjk6psc6ul5jnfwloamhtyh7si74b47a3k2q3pskwwxrzhsxmad.onion
\f[R]
.fi
.RE
.TP
\f[B]auth-client --list\f[R]
List authentication files and the respective private keys from
ClientOnionAuthDir.Useful when removing files and you want to see which
onions you are already authenticated with.
File(s) modified: none.
.RS
.IP
.nf
\f[C]
onionjuggler-cli auth-client --list
\f[R]
.fi
.RE
.TP
\f[B]web --on\f[R] \f[B]--service\f[R] [\f[I]SERV\f[R]] \f[B]--folder\f[R] [\f[I]FOLDER\f[R]]
Enable a website using a specific onion service by creating a
configuration file inside the web server folder by default, the folder
name is to be considered the wanted folder inside website_dir variable
defined on /etc/onionservice.conf.
If the path starts with forward slash \[dq]/\[dq] or tilde and slash
\[dq]\[ti]/\[dq], that path will be considered instead.
File(s) modified: \[dq]${webserver_conf}\[dq].
.RS
.IP
.nf
\f[C]
onionjuggler-cli web on nextcloud nextcloud-local-site
\f[R]
.fi
.RE
.TP
\f[B]web --off\f[R] \f[B]--service\f[R] [\f[I]SERV\f[R]]
Disable a website from a specific onion service by removing its
configuration file from the webserver folder.
File(s) modified: $webserver_conf
.RS
.IP
.nf
\f[C]
onionjuggler-cli web off nextcloud
\f[R]
.fi
.RE
.TP
\f[B]web --list\f[R]
List enabled websites, meaning the configuration files inside the
webserver folder /etc/${webserver}/sites-enabled/.
File(s) modified: none.
.RS
.IP
.nf
\f[C]
onionjuggler-cli web list
\f[R]
.fi
.RE
.TP
\f[B]location\f[R] \f[B]--service\f[R] [\f[I]SERV\f[R]] [\f[I]--nginx\f[R]|\f[I]--apache2\f[R]|\f[I]--html\f[R]]
Guide to add onion location to your plainnet website when using the
webserver Nginx or Apache2 or an HTML header.
It does not modify any configuration by itself, the instructions to do
so are send to stdout.
File(s) modified: none.
.RS
.IP
.nf
\f[C]
onionjuggler-cli location --service nextcloud --nginx
onionjuggler-cli location --service nextcloud --apache2
onionjuggler-cli location --service nextcloud --html
\f[R]
.fi
.RE
.TP
\f[B]backup\f[R] [\f[I]--create\f[R]|\f[I]--integrate\f[R]]
Backup all of the torrc, DataDir/services and ClientOnionAuthDir either
by creating a backup file or integrating to the system from a backup
made before.
File(s) modified: torrc, DataDir/services, ClientOnionAuthDir.
.RS
.IP
.nf
\f[C]
onionjuggler-cli backup --create
onionjuggler-cli backup --integrate
\f[R]
.fi
.RE
.TP
\f[B]restore\f[R] \f[I]torrc\f[R]
Before every change to the torrc state, a backup is saved on the same
folder named torrc.bak.
This option restore the latest torrc change to revert the last change to
the configuration.
.TP
\f[B]vanguards\f[R] [\f[I]--on\f[R]|\f[I]--list\f[R]|\f[I]--upgrade\f[R]|\f[I]--off\f[R]]
Manage Vanguards addon using the repository
https://github.com/mikeperry-tor/vanguards.
This addon protects against guard discovery and related traffic analysis
attacks.
A guard discovery attack enables an adversary to determine the guard
node(s) that are in use by a Tor client and/or Tor onion service.
Once the guard node is known, traffic analysis attacks that can
deanonymize an onion service (or onion service user) become easier.
Installation (git clone) and Upgrade (git pull) are bound to a commit
hash set on the /etc/onionservice.conf (git reset --hard
vanguards_commit).
Remove will delete the vanguards directory.
Logs follow the service logs.
When installing, it create a service called vanguards\[at]default, which
you can stop and start.
File(s) modified: DataDir/vanguards/vanguards.conf.
.RS
.IP
.nf
\f[C]
onionjuggler-cli vanguards --on
onionjuggler-cli vanguards --list
onionjuggler-cli vanguards --upgrade
onionjuggler-cli vanguards --off
\f[R]
.fi
.RE
.TP
\f[B]-h\f[R], \f[B]-help\f[R], \f[B]--help\f[R], \f[B]help\f[R]
Display the script help message.
Abscense of any parameter will also have the same effect.
.RS
.IP
.nf
\f[C]
onionjuggler-cli
onionjuggler-cli -h
onionjuggler-cli -help
onionjuggler-cli --help
onionjuggler-cli help
\f[R]
.fi
.RE
.TP
\f[B]-R\f[R], \f[B]--restart\f[R], \f[B]-r\f[R], \f[B]--reload\f[R]
Signal tor daemon to restart or reload after the CLI edits tor\[aq]s
configuration files.
(Default: reload)
.TP
\f[B]-C\f[R], \f[B]--config\f[R]
Specify and alternative configuration file to override default
configuration.
.SH FILES
.TP
\f[B]/etc/onionjuggler/onionjuggler.conf\f[R]
Default system configuration file.
.TP
\f[B]/etc/onionjuggler/conf.d/*.conf\f[R]
Local configuration files that overrrite the default one.
.SH ENVIRONMENT
.TP
\f[B]ONIONJUGGLER_CONF\f[R]
The environmental variable will override all previous options.
.SH EXIT VALUE
.TP
\f[B]0\f[R]
Success
.TP
\f[B]1\f[R]
Fail
.SH BUGS
.PP
Bugs you may find.
First search for related issues on
https://github.com/nyxnor/onionjuggler/issues, if not solved, open a new
one.
.SH SEE ALSO
.PP
onionjuggler-tui(1), onionjuggler.conf(5), vitor(8), tor(1), sh(1),
regex(7), sed(1), grep(1), shellcheck(1)
.SH COPYRIGHT
.PP
Copyright \[co] 2021 OnionJuggler developers (MIT) This is free
software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH AUTHORS
Written by nyxnor (nyxnor\[at]protonmail.com).
